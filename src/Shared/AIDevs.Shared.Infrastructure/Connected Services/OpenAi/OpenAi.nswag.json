{
  "openapi": "3.0.0",
  "info": {
    "title": "OpenAI API",
    "description": "The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.",
    "termsOfService": "https://openai.com/policies/terms-of-use",
    "contact": {
      "name": "OpenAI Support",
      "url": "https://help.openai.com/"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/openai/openai-openapi/blob/master/LICENSE"
    },
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://api.openai.com/v1"
    }
  ],
  "paths": {
    "/chat/completions": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Creates a model response for the given chat conversation.",
        "operationId": "createChatCompletion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateChatCompletionResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Create chat completion",
          "group": "chat",
          "returns": "Returns a [chat completion](/docs/api-reference/chat/object) object, or a streamed sequence of [chat completion chunk](/docs/api-reference/chat/streaming) objects if the request is streamed.\n",
          "path": "create",
          "examples": [
            {
              "title": "No Streaming",
              "request": {
                "curl": "curl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"VAR_model_id\",\n    \"messages\": [\n      {\n        \"role\": \"system\",\n        \"content\": \"You are a helpful assistant.\"\n      },\n      {\n        \"role\": \"user\",\n        \"content\": \"Hello!\"\n      }\n    ]\n  }'\n",
                "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n\ncompletion = openai.ChatCompletion.create(\n  model=\"VAR_model_id\",\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"Hello!\"}\n  ]\n)\n\nprint(completion.choices[0].message)\n",
                "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const completion = await openai.chat.completions.create({\n    messages: [{ role: \"system\", content: \"You are a helpful assistant.\" }],\n    model: \"VAR_model_id\",\n  });\n\n  console.log(completion.choices[0]);\n}\n\nmain();"
              },
              "response": "{\n  \"id\": \"chatcmpl-123\",\n  \"object\": \"chat.completion\",\n  \"created\": 1677652288,\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"choices\": [{\n    \"index\": 0,\n    \"message\": {\n      \"role\": \"assistant\",\n      \"content\": \"\\n\\nHello there, how may I assist you today?\",\n    },\n    \"finish_reason\": \"stop\"\n  }],\n  \"usage\": {\n    \"prompt_tokens\": 9,\n    \"completion_tokens\": 12,\n    \"total_tokens\": 21\n  }\n}\n"
            },
            {
              "title": "Streaming",
              "request": {
                "curl": "curl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"VAR_model_id\",\n    \"messages\": [\n      {\n        \"role\": \"system\",\n        \"content\": \"You are a helpful assistant.\"\n      },\n      {\n        \"role\": \"user\",\n        \"content\": \"Hello!\"\n      }\n    ],\n    \"stream\": true\n  }'\n",
                "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n\ncompletion = openai.ChatCompletion.create(\n  model=\"VAR_model_id\",\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"Hello!\"}\n  ],\n  stream=True\n)\n\nfor chunk in completion:\n  print(chunk.choices[0].delta)\n",
                "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const completion = await openai.chat.completions.create({\n    model: \"VAR_model_id\",\n    messages: [\n      {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n      {\"role\": \"user\", \"content\": \"Hello!\"}\n    ],\n    stream: true,\n  });\n\n  for await (const chunk of completion) {\n    console.log(chunk.choices[0].delta.content);\n  }\n}\n\nmain();"
              },
              "response": "{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\",\"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":\"\"},\"finish_reason\":null}]}\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"Hello\"},\"finish_reason\":null}]}\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"!\"},\"finish_reason\":null}]}\n\n....\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" today\"},\"finish_reason\":null}]}\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"?\"},\"finish_reason\":null}]}\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\",\"choices\":[{\"index\":0,\"delta\":{},\"finish_reason\":\"stop\"}]}\n"
            },
            {
              "title": "Function calling",
              "request": {
                "curl": "curl https://api.openai.com/v1/chat/completions \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n-d '{\n  \"model\": \"gpt-3.5-turbo\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"What is the weather like in Boston?\"\n    }\n  ],\n  \"functions\": [\n    {\n      \"name\": \"get_current_weather\",\n      \"description\": \"Get the current weather in a given location\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"location\": {\n            \"type\": \"string\",\n            \"description\": \"The city and state, e.g. San Francisco, CA\"\n          },\n          \"unit\": {\n            \"type\": \"string\",\n            \"enum\": [\"celsius\", \"fahrenheit\"]\n          }\n        },\n        \"required\": [\"location\"]\n      }\n    }\n  ],\n  \"function_call\": \"auto\"\n}'\n",
                "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n\nfunctions = [ \n  {\n    \"name\": \"get_current_weather\",\n    \"description\": \"Get the current weather in a given location\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"location\": {\n                \"type\": \"string\",\n                \"description\": \"The city and state, e.g. San Francisco, CA\",\n            },\n            \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]},\n        },\n        \"required\": [\"location\"],\n    },\n  }\n]\nmessages = [{\"role\": \"user\", \"content\": \"What's the weather like in Boston today?\"}]\ncompletion = openai.ChatCompletion.create(\n  model=\"VAR_model_id\",\n  messages=messages,\n  functions=functions,\n  function_call=\"auto\",  # auto is default, but we'll be explicit\n)\n\nprint(completion)\n",
                "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const messages = [{\"role\": \"user\", \"content\": \"What's the weather like in Boston today?\"}];\n  const functions = [\n      {\n          \"name\": \"get_current_weather\",\n          \"description\": \"Get the current weather in a given location\",\n          \"parameters\": {\n              \"type\": \"object\",\n              \"properties\": {\n                  \"location\": {\n                      \"type\": \"string\",\n                      \"description\": \"The city and state, e.g. San Francisco, CA\",\n                  },\n                  \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]},\n              },\n              \"required\": [\"location\"],\n          },\n      }\n  ];\n\n  const response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: messages,\n      functions: functions,\n      function_call: \"auto\",  // auto is default, but we'll be explicit\n  });\n\n  console.log(response);\n}\n\nmain();"
              },
              "response": "{\n  \"choices\": [\n    {\n      \"finish_reason\": \"function_call\",\n      \"index\": 0,\n      \"message\": {\n        \"content\": null,\n        \"function_call\": {\n          \"arguments\": \"{\\n  \\\"location\\\": \\\"Boston, MA\\\"\\n}\",\n          \"name\": \"get_current_weather\"\n        },\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1694028367,\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"object\": \"chat.completion\",\n  \"usage\": {\n    \"completion_tokens\": 18,\n    \"prompt_tokens\": 82,\n    \"total_tokens\": 100\n  }\n}\n"
            }
          ]
        }
      }
    },
    "/completions": {
      "post": {
        "tags": [
          "Completions"
        ],
        "summary": "Creates a completion for the provided prompt and parameters.",
        "operationId": "createCompletion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCompletionResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Create completion",
          "returns": "Returns a [completion](/docs/api-reference/completions/object) object, or a sequence of completion objects if the request is streamed.\n",
          "legacy": "true",
          "examples": [
            {
              "title": "No streaming",
              "request": {
                "curl": "curl https://api.openai.com/v1/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"VAR_model_id\",\n    \"prompt\": \"Say this is a test\",\n    \"max_tokens\": 7,\n    \"temperature\": 0\n  }'\n",
                "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Completion.create(\n  model=\"VAR_model_id\",\n  prompt=\"Say this is a test\",\n  max_tokens=7,\n  temperature=0\n)\n",
                "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const completion = await openai.completions.create({\n    model: \"VAR_model_id\",\n    prompt: \"Say this is a test.\",\n    max_tokens: 7,\n    temperature: 0,\n  });\n\n  console.log(completion);\n}\nmain();"
              },
              "response": "{\n  \"id\": \"cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7\",\n  \"object\": \"text_completion\",\n  \"created\": 1589478378,\n  \"model\": \"VAR_model_id\",\n  \"choices\": [\n    {\n      \"text\": \"\\n\\nThis is indeed a test\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"finish_reason\": \"length\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 5,\n    \"completion_tokens\": 7,\n    \"total_tokens\": 12\n  }\n}\n"
            },
            {
              "title": "Streaming",
              "request": {
                "curl": "curl https://api.openai.com/v1/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"VAR_model_id\",\n    \"prompt\": \"Say this is a test\",\n    \"max_tokens\": 7,\n    \"temperature\": 0,\n    \"stream\": true\n  }'\n",
                "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nfor chunk in openai.Completion.create(\n  model=\"VAR_model_id\",\n  prompt=\"Say this is a test\",\n  max_tokens=7,\n  temperature=0,\n  stream=True\n):\n  print(chunk['choices'][0]['text'])\n",
                "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const stream = await openai.completions.create({\n    model: \"VAR_model_id\",\n    prompt: \"Say this is a test.\",\n    stream: true,\n  });\n\n  for await (const chunk of stream) {\n    console.log(chunk.choices[0].text)\n  }\n}\nmain();"
              },
              "response": "{\n  \"id\": \"cmpl-7iA7iJjj8V2zOkCGvWF2hAkDWBQZe\",\n  \"object\": \"text_completion\",\n  \"created\": 1690759702,\n  \"choices\": [\n    {\n      \"text\": \"This\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"finish_reason\": null\n    }\n  ],\n  \"model\": \"gpt-3.5-turbo-instruct\"\n}\n"
            }
          ]
        }
      }
    },
    "/edits": {
      "post": {
        "tags": [
          "Edits"
        ],
        "summary": "Creates a new edit for the provided input, instruction, and parameters.",
        "operationId": "createEdit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEditRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEditResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-oaiMeta": {
          "name": "Create edit",
          "returns": "Returns an [edit](/docs/api-reference/edits/object) object.\n",
          "group": "edits",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/edits \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"VAR_model_id\",\n    \"input\": \"What day of the wek is it?\",\n    \"instruction\": \"Fix the spelling mistakes\"\n  }'\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Edit.create(\n  model=\"VAR_model_id\",\n  input=\"What day of the wek is it?\",\n  instruction=\"Fix the spelling mistakes\"\n)\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const edit = await openai.edits.create({\n    model: \"VAR_model_id\",\n    input: \"What day of the wek is it?\",\n    instruction: \"Fix the spelling mistakes.\",\n  });\n\n  console.log(edit);\n}\n\nmain();"
            },
            "response": "{\n  \"object\": \"edit\",\n  \"created\": 1589478378,\n  \"choices\": [\n    {\n      \"text\": \"What day of the week is it?\",\n      \"index\": 0,\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 25,\n    \"completion_tokens\": 32,\n    \"total_tokens\": 57\n  }\n}\n"
          }
        }
      }
    },
    "/images/generations": {
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Creates an image given a prompt.",
        "operationId": "createImage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateImageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImagesResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Create image",
          "returns": "Returns a list of [image](/docs/api-reference/images/object) objects.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/images/generations \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"prompt\": \"A cute baby sea otter\",\n    \"n\": 2,\n    \"size\": \"1024x1024\"\n  }'\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Image.create(\n  prompt=\"A cute baby sea otter\",\n  n=2,\n  size=\"1024x1024\"\n)\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const image = await openai.images.generate({ prompt: \"A cute baby sea otter\" });\n\n  console.log(image.data);\n}\nmain();"
            },
            "response": "{\n  \"created\": 1589478378,\n  \"data\": [\n    {\n      \"url\": \"https://...\"\n    },\n    {\n      \"url\": \"https://...\"\n    }\n  ]\n}\n"
          }
        }
      }
    },
    "/images/edits": {
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Creates an edited or extended image given an original image and a prompt.",
        "operationId": "createImageEdit",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateImageEditRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImagesResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Create image edit",
          "returns": "Returns a list of [image](/docs/api-reference/images/object) objects.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/images/edits \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -F image=\"@otter.png\" \\\n  -F mask=\"@mask.png\" \\\n  -F prompt=\"A cute baby sea otter wearing a beret\" \\\n  -F n=2 \\\n  -F size=\"1024x1024\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Image.create_edit(\n  image=open(\"otter.png\", \"rb\"),\n  mask=open(\"mask.png\", \"rb\"),\n  prompt=\"A cute baby sea otter wearing a beret\",\n  n=2,\n  size=\"1024x1024\"\n)\n",
              "node.js": "import fs from \"fs\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const image = await openai.images.edit({\n    image: fs.createReadStream(\"otter.png\"),\n    mask: fs.createReadStream(\"mask.png\"),\n    prompt: \"A cute baby sea otter wearing a beret\",\n  });\n\n  console.log(image.data);\n}\nmain();"
            },
            "response": "{\n  \"created\": 1589478378,\n  \"data\": [\n    {\n      \"url\": \"https://...\"\n    },\n    {\n      \"url\": \"https://...\"\n    }\n  ]\n}\n"
          }
        }
      }
    },
    "/images/variations": {
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Creates a variation of a given image.",
        "operationId": "createImageVariation",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateImageVariationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImagesResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Create image variation",
          "returns": "Returns a list of [image](/docs/api-reference/images/object) objects.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/images/variations \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -F image=\"@otter.png\" \\\n  -F n=2 \\\n  -F size=\"1024x1024\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Image.create_variation(\n  image=open(\"otter.png\", \"rb\"),\n  n=2,\n  size=\"1024x1024\"\n)\n",
              "node.js": "import fs from \"fs\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const image = await openai.images.createVariation({\n    image: fs.createReadStream(\"otter.png\"),\n  });\n\n  console.log(image.data);\n}\nmain();"
            },
            "response": "{\n  \"created\": 1589478378,\n  \"data\": [\n    {\n      \"url\": \"https://...\"\n    },\n    {\n      \"url\": \"https://...\"\n    }\n  ]\n}\n"
          }
        }
      }
    },
    "/embeddings": {
      "post": {
        "tags": [
          "Embeddings"
        ],
        "summary": "Creates an embedding vector representing the input text.",
        "operationId": "createEmbedding",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmbeddingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmbeddingResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Create embeddings",
          "returns": "A list of [embedding](/docs/api-reference/embeddings/object) objects.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/embeddings \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": \"The food was delicious and the waiter...\",\n    \"model\": \"text-embedding-ada-002\",\n    \"encoding_format\": \"float\"\n  }'\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Embedding.create(\n  model=\"text-embedding-ada-002\",\n  input=\"The food was delicious and the waiter...\",\n  encoding_format=\"float\"\n)\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const embedding = await openai.embeddings.create({\n    model: \"text-embedding-ada-002\",\n    input: \"The quick brown fox jumped over the lazy dog\",\n    encoding_format: \"float\",\n  });\n\n  console.log(embedding);\n}\n\nmain();"
            },
            "response": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"embedding\",\n      \"embedding\": [\n        0.0023064255,\n        -0.009327292,\n        .... (1536 floats total for ada-002)\n        -0.0028842222,\n      ],\n      \"index\": 0\n    }\n  ],\n  \"model\": \"text-embedding-ada-002\",\n  \"usage\": {\n    \"prompt_tokens\": 8,\n    \"total_tokens\": 8\n  }\n}\n"
          }
        }
      }
    },
    "/audio/transcriptions": {
      "post": {
        "tags": [
          "Audio"
        ],
        "summary": "Transcribes audio into the input language.",
        "operationId": "createTranscription",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateTranscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTranscriptionResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Create transcription",
          "returns": "The transcriped text.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/audio/transcriptions \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: multipart/form-data\" \\\n  -F file=\"@/path/to/file/audio.mp3\" \\\n  -F model=\"whisper-1\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\naudio_file = open(\"audio.mp3\", \"rb\")\ntranscript = openai.Audio.transcribe(\"whisper-1\", audio_file)\n",
              "node": "import fs from \"fs\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const transcription = await openai.audio.transcriptions.create({\n    file: fs.createReadStream(\"audio.mp3\"),\n    model: \"whisper-1\",\n  });\n\n  console.log(transcription.text);\n}\nmain();"
            },
            "response": "{\n  \"text\": \"Imagine the wildest idea that you've ever had, and you're curious about how it might scale to something that's a 100, a 1,000 times bigger. This is a place where you can get to do that.\"\n}\n"
          }
        }
      }
    },
    "/audio/translations": {
      "post": {
        "tags": [
          "Audio"
        ],
        "summary": "Translates audio into English.",
        "operationId": "createTranslation",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateTranslationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTranslationResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Create translation",
          "returns": "The translated text.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/audio/translations \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: multipart/form-data\" \\\n  -F file=\"@/path/to/file/german.m4a\" \\\n  -F model=\"whisper-1\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\naudio_file = open(\"german.m4a\", \"rb\")\ntranscript = openai.Audio.translate(\"whisper-1\", audio_file)\n",
              "node": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst resp = await openai.createTranslation(\n  fs.createReadStream(\"audio.mp3\"),\n  \"whisper-1\"\n);\n"
            },
            "response": "{\n  \"text\": \"Hello, my name is Wolfgang and I come from Germany. Where are you heading today?\"\n}\n"
          }
        }
      }
    },
    "/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Returns a list of files that belong to the user's organization.",
        "operationId": "listFiles",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFilesResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "List files",
          "returns": "A list of [file](/docs/api-reference/files/object) objects.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/files \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.File.list()\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const list = await openai.files.list();\n\n  for await (const file of list) {\n    console.log(file);\n  }\n}\n\nmain();"
            },
            "response": "{\n  \"data\": [\n    {\n      \"id\": \"file-abc123\",\n      \"object\": \"file\",\n      \"bytes\": 175,\n      \"created_at\": 1613677385,\n      \"filename\": \"train.jsonl\",\n      \"purpose\": \"search\"\n    },\n    {\n      \"id\": \"file-abc123\",\n      \"object\": \"file\",\n      \"bytes\": 140,\n      \"created_at\": 1613779121,\n      \"filename\": \"puppy.jsonl\",\n      \"purpose\": \"search\"\n    }\n  ],\n  \"object\": \"list\"\n}\n"
          }
        }
      },
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Upload a file that can be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please [contact us](https://help.openai.com/) if you need to increase the storage limit.\n",
        "operationId": "createFile",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateFileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIFile"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Upload file",
          "returns": "The uploaded [file](/docs/api-reference/files/object) object.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/files \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -F purpose=\"fine-tune\" \\\n  -F file=\"@mydata.jsonl\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.File.create(\n  file=open(\"mydata.jsonl\", \"rb\"),\n  purpose='fine-tune'\n)\n",
              "node.js": "import fs from \"fs\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const file = await openai.files.create({\n    file: fs.createReadStream(\"mydata.jsonl\"),\n    purpose: \"fine-tune\",\n  });\n\n  console.log(file);\n}\n\nmain();"
            },
            "response": "{\n  \"id\": \"file-abc123\",\n  \"object\": \"file\",\n  \"bytes\": 140,\n  \"created_at\": 1613779121,\n  \"filename\": \"mydata.jsonl\",\n  \"purpose\": \"fine-tune\",\n  \"status\": \"uploaded\" | \"processed\" | \"pending\" | \"error\"\n}\n"
          }
        }
      }
    },
    "/files/{file_id}": {
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Delete a file.",
        "operationId": "deleteFile",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "description": "The ID of the file to use for this request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteFileResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Delete file",
          "returns": "Deletion status.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/files/file-abc123 \\\n  -X DELETE \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.File.delete(\"file-abc123\")\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const file = await openai.files.del(\"file-abc123\");\n\n  console.log(file);\n}\n\nmain();"
            },
            "response": "{\n  \"id\": \"file-abc123\",\n  \"object\": \"file\",\n  \"deleted\": true\n}\n"
          }
        }
      },
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Returns information about a specific file.",
        "operationId": "retrieveFile",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "description": "The ID of the file to use for this request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIFile"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Retrieve file",
          "returns": "The [file](/docs/api-reference/files/object) object matching the specified ID.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/files/file-abc123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.File.retrieve(\"file-abc123\")\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const file = await openai.files.retrieve(\"file-abc123\");\n\n  console.log(file);\n}\n\nmain();"
            },
            "response": "{\n  \"id\": \"file-abc123\",\n  \"object\": \"file\",\n  \"bytes\": 140,\n  \"created_at\": 1613779657,\n  \"filename\": \"mydata.jsonl\",\n  \"purpose\": \"fine-tune\"\n}\n"
          }
        }
      }
    },
    "/files/{file_id}/content": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Returns the contents of the specified file.",
        "operationId": "downloadFile",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "description": "The ID of the file to use for this request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Retrieve file content",
          "returns": "The file content.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/files/file-abc123/content \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" > file.jsonl\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\ncontent = openai.File.download(\"file-abc123\")\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const file = await openai.files.retrieveContent(\"file-abc123\");\n\n  console.log(file);\n}\n\nmain();\n"
            }
          }
        }
      }
    },
    "/fine_tuning/jobs": {
      "post": {
        "tags": [
          "Fine-tuning"
        ],
        "summary": "Creates a job that fine-tunes a specified model from a given dataset.\n\nResponse includes details of the enqueued job including job status and the name of the fine-tuned models once complete.\n\n[Learn more about fine-tuning](/docs/guides/fine-tuning)\n",
        "operationId": "createFineTuningJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFineTuningJobRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJob"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Create fine-tuning job",
          "returns": "A [fine-tuning.job](/docs/api-reference/fine-tuning/object) object.",
          "examples": [
            {
              "title": "No hyperparameters",
              "request": {
                "curl": "curl https://api.openai.com/v1/fine_tuning/jobs \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"training_file\": \"file-abc123\",\n    \"model\": \"gpt-3.5-turbo\"\n  }'\n",
                "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTuningJob.create(training_file=\"file-abc123\", model=\"gpt-3.5-turbo\")\n",
                "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const fineTune = await openai.fineTuning.jobs.create({\n    training_file: \"file-abc123\"\n  });\n\n  console.log(fineTune);\n}\n\nmain();\n"
              },
              "response": "{\n  \"object\": \"fine_tuning.job\",\n  \"id\": \"ftjob-abc123\",\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"created_at\": 1614807352,\n  \"fine_tuned_model\": null,\n  \"organization_id\": \"org-123\",\n  \"result_files\": [],\n  \"status\": \"queued\",\n  \"validation_file\": null,\n  \"training_file\": \"file-abc123\",\n}\n"
            },
            {
              "title": "Hyperparameters",
              "request": {
                "curl": "curl https://api.openai.com/v1/fine_tuning/jobs \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"training_file\": \"file-abc123\",\n    \"model\": \"gpt-3.5-turbo\",\n    \"hyperparameters\": {\n      \"n_epochs\": 2\n    }\n  }'\n",
                "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTuningJob.create(training_file=\"file-abc123\", model=\"gpt-3.5-turbo\", hyperparameters={\"n_epochs\":2})\n",
                "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const fineTune = await openai.fineTuning.jobs.create({\n    training_file: \"file-abc123\",\n    model: \"gpt-3.5-turbo\",\n    hyperparameters: { n_epochs: 2 }\n  });\n\n  console.log(fineTune);\n}\n\nmain();\n"
              },
              "response": "{\n  \"object\": \"fine_tuning.job\",\n  \"id\": \"ftjob-abc123\",\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"created_at\": 1614807352,\n  \"fine_tuned_model\": null,\n  \"organization_id\": \"org-123\",\n  \"result_files\": [],\n  \"status\": \"queued\",\n  \"validation_file\": null,\n  \"training_file\": \"file-abc123\",\n  \"hyperparameters\":{\"n_epochs\":2},\n}\n"
            },
            {
              "title": "Validation file",
              "request": {
                "curl": "curl https://api.openai.com/v1/fine_tuning/jobs \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"training_file\": \"file-abc123\",\n    \"validation_file\": \"file-abc123\",\n    \"model\": \"gpt-3.5-turbo\"\n  }'\n",
                "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTuningJob.create(training_file=\"file-abc123\", validation_file=\"file-abc123\", model=\"gpt-3.5-turbo\")\n",
                "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const fineTune = await openai.fineTuning.jobs.create({\n    training_file: \"file-abc123\",\n    validation_file: \"file-abc123\"\n  });\n\n  console.log(fineTune);\n}\n\nmain();\n"
              },
              "response": "{\n  \"object\": \"fine_tuning.job\",\n  \"id\": \"ftjob-abc123\",\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"created_at\": 1614807352,\n  \"fine_tuned_model\": null,\n  \"organization_id\": \"org-123\",\n  \"result_files\": [],\n  \"status\": \"queued\",\n  \"validation_file\": \"file-abc123\",\n  \"training_file\": \"file-abc123\",\n}\n"
            }
          ]
        }
      },
      "get": {
        "tags": [
          "Fine-tuning"
        ],
        "summary": "List your organization's fine-tuning jobs\n",
        "operationId": "listPaginatedFineTuningJobs",
        "parameters": [
          {
            "name": "after",
            "in": "query",
            "description": "Identifier for the last job from the previous pagination request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of fine-tuning jobs to retrieve.",
            "schema": {
              "type": "integer",
              "default": "20"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPaginatedFineTuningJobsResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "List fine-tuning jobs",
          "returns": "A list of paginated [fine-tuning job](/docs/api-reference/fine-tuning/object) objects.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/fine_tuning/jobs?limit=2 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTuningJob.list()\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const list = await openai.fineTuning.jobs.list();\n\n  for await (const fineTune of list) {\n    console.log(fineTune);\n  }\n}\n\nmain();"
            },
            "response": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"fine_tuning.job.event\",\n      \"id\": \"ft-event-TjX0lMfOniCZX64t9PUQT5hn\",\n      \"created_at\": 1689813489,\n      \"level\": \"warn\",\n      \"message\": \"Fine tuning process stopping due to job cancellation\",\n      \"data\": null,\n      \"type\": \"message\"\n    },\n    { ... },\n    { ... }\n  ], \"has_more\": true\n}\n"
          }
        }
      }
    },
    "/fine_tuning/jobs/{fine_tuning_job_id}": {
      "get": {
        "tags": [
          "Fine-tuning"
        ],
        "summary": "Get info about a fine-tuning job.\n\n[Learn more about fine-tuning](/docs/guides/fine-tuning)\n",
        "operationId": "retrieveFineTuningJob",
        "parameters": [
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "description": "The ID of the fine-tuning job.\n",
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJob"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Retrieve fine-tuning job",
          "returns": "The [fine-tuning](/docs/api-reference/fine-tunes/object) object with the given ID.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/fine_tuning/jobs/ft-AF1WoRqd3aJAHsqc9NY7iL8F \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTuningJob.retrieve(\"ftjob-abc123\")\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const fineTune = await openai.fineTuning.jobs.retrieve(\"ftjob-abc123\");\n  \n  console.log(fineTune);\n}\n\nmain();\n"
            },
            "response": "{\n  \"object\": \"fine_tuning.job\",\n  \"id\": \"ftjob-abc123\",\n  \"model\": \"davinci-002\",\n  \"created_at\": 1692661014,\n  \"finished_at\": 1692661190,\n  \"fine_tuned_model\": \"ft:davinci-002:my-org:custom_suffix:7q8mpxmy\",\n  \"organization_id\": \"org-123\",\n  \"result_files\": [\n      \"file-abc123\"\n  ],\n  \"status\": \"succeeded\",\n  \"validation_file\": null,\n  \"training_file\": \"file-abc123\",\n  \"hyperparameters\": {\n      \"n_epochs\": 4,\n  },\n  \"trained_tokens\": 5768\n}\n"
          }
        }
      }
    },
    "/fine_tuning/jobs/{fine_tuning_job_id}/events": {
      "get": {
        "tags": [
          "Fine-tuning"
        ],
        "summary": "Get status updates for a fine-tuning job.\n",
        "operationId": "listFineTuningEvents",
        "parameters": [
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "description": "The ID of the fine-tuning job to get events for.\n",
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Identifier for the last event from the previous pagination request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of events to retrieve.",
            "schema": {
              "type": "integer",
              "default": "20"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFineTuningJobEventsResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "List fine-tuning events",
          "returns": "A list of fine-tuning event objects.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/fine_tuning/jobs/ftjob-abc123/events \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTuningJob.list_events(id=\"ftjob-abc123\", limit=2)\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const list = await openai.fineTuning.list_events(id=\"ftjob-abc123\", limit=2);\n\n  for await (const fineTune of list) {\n    console.log(fineTune);\n  }\n}\n\nmain();"
            },
            "response": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"fine_tuning.job.event\",\n      \"id\": \"ft-event-ddTJfwuMVpfLXseO0Am0Gqjm\",\n      \"created_at\": 1692407401,\n      \"level\": \"info\",\n      \"message\": \"Fine tuning job successfully completed\",\n      \"data\": null,\n      \"type\": \"message\"\n    },\n    {\n      \"object\": \"fine_tuning.job.event\",\n      \"id\": \"ft-event-tyiGuB72evQncpH87xe505Sv\",\n      \"created_at\": 1692407400,\n      \"level\": \"info\",\n      \"message\": \"New fine-tuned model created: ft:gpt-3.5-turbo:openai::7p4lURel\",\n      \"data\": null,\n      \"type\": \"message\"\n    }\n  ],\n  \"has_more\": true\n}\n"
          }
        }
      }
    },
    "/fine_tuning/jobs/{fine_tuning_job_id}/cancel": {
      "post": {
        "tags": [
          "Fine-tuning"
        ],
        "summary": "Immediately cancel a fine-tune job.\n",
        "operationId": "cancelFineTuningJob",
        "parameters": [
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "description": "The ID of the fine-tuning job to cancel.\n",
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJob"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Cancel fine-tuning",
          "returns": "The cancelled [fine-tuning](/docs/api-reference/fine-tuning/object) object.",
          "examples": {
            "request": {
              "curl": "curl -X POST https://api.openai.com/v1/fine_tuning/jobs/ftjob-abc123/cancel \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTuningJob.cancel(\"ftjob-abc123\")\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const fineTune = await openai.fineTuning.jobs.cancel(\"ftjob-abc123\");\n\n  console.log(fineTune);\n}\nmain();"
            },
            "response": "{\n  \"object\": \"fine_tuning.job\",\n  \"id\": \"ftjob-abc123\",\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"created_at\": 1689376978,\n  \"fine_tuned_model\": null,\n  \"organization_id\": \"org-123\",\n  \"result_files\": [],\n  \"hyperparameters\": {\n    \"n_epochs\":  \"auto\"\n  },\n  \"status\": \"cancelled\",\n  \"validation_file\": \"file-abc123\",\n  \"training_file\": \"file-abc123\"\n}\n"
          }
        }
      }
    },
    "/fine-tunes": {
      "post": {
        "tags": [
          "Fine-tunes"
        ],
        "summary": "Creates a job that fine-tunes a specified model from a given dataset.\n\nResponse includes details of the enqueued job including job status and the name of the fine-tuned models once complete.\n\n[Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)\n",
        "operationId": "createFineTune",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFineTuneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTune"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-oaiMeta": {
          "name": "Create fine-tune",
          "returns": "A [fine-tune](/docs/api-reference/fine-tunes/object) object.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/fine-tunes \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"training_file\": \"file-abc123\"\n  }'\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTune.create(training_file=\"file-abc123\")\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const fineTune = await openai.fineTunes.create({\n    training_file: \"file-abc123\"\n  });\n\n  console.log(fineTune);\n}\n\nmain();\n"
            },
            "response": "{\n  \"id\": \"ft-AF1WoRqd3aJAHsqc9NY7iL8F\",\n  \"object\": \"fine-tune\",\n  \"model\": \"curie\",\n  \"created_at\": 1614807352,\n  \"events\": [\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807352,\n      \"level\": \"info\",\n      \"message\": \"Job enqueued. Waiting for jobs ahead to complete. Queue number: 0.\"\n    }\n  ],\n  \"fine_tuned_model\": null,\n  \"hyperparams\": {\n    \"batch_size\": 4,\n    \"learning_rate_multiplier\": 0.1,\n    \"n_epochs\": 4,\n    \"prompt_loss_weight\": 0.1,\n  },\n  \"organization_id\": \"org-123\",\n  \"result_files\": [],\n  \"status\": \"pending\",\n  \"validation_files\": [],\n  \"training_files\": [\n    {\n      \"id\": \"file-abc123\",\n      \"object\": \"file\",\n      \"bytes\": 1547276,\n      \"created_at\": 1610062281,\n      \"filename\": \"my-data-train.jsonl\",\n      \"purpose\": \"fine-tune-train\"\n    }\n  ],\n  \"updated_at\": 1614807352,\n}\n"
          }
        }
      },
      "get": {
        "tags": [
          "Fine-tunes"
        ],
        "summary": "List your organization's fine-tuning jobs\n",
        "operationId": "listFineTunes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFineTunesResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-oaiMeta": {
          "name": "List fine-tunes",
          "returns": "A list of [fine-tune](/docs/api-reference/fine-tunes/object) objects.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/fine-tunes \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTune.list()\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const list = await openai.fineTunes.list();\n\n  for await (const fineTune of list) {\n    console.log(fineTune);\n  }\n}\n\nmain();"
            },
            "response": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"ft-AF1WoRqd3aJAHsqc9NY7iL8F\",\n      \"object\": \"fine-tune\",\n      \"model\": \"curie\",\n      \"created_at\": 1614807352,\n      \"fine_tuned_model\": null,\n      \"hyperparams\": { ... },\n      \"organization_id\": \"org-123\",\n      \"result_files\": [],\n      \"status\": \"pending\",\n      \"validation_files\": [],\n      \"training_files\": [ { ... } ],\n      \"updated_at\": 1614807352,\n    },\n    { ... },\n    { ... }\n  ]\n}\n"
          }
        }
      }
    },
    "/fine-tunes/{fine_tune_id}": {
      "get": {
        "tags": [
          "Fine-tunes"
        ],
        "summary": "Gets info about the fine-tune job.\n\n[Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)\n",
        "operationId": "retrieveFineTune",
        "parameters": [
          {
            "name": "fine_tune_id",
            "in": "path",
            "required": true,
            "description": "The ID of the fine-tune job\n",
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTune"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-oaiMeta": {
          "name": "Retrieve fine-tune",
          "returns": "The [fine-tune](/docs/api-reference/fine-tunes/object) object with the given ID.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/fine-tunes/ft-AF1WoRqd3aJAHsqc9NY7iL8F \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTune.retrieve(id=\"ft-AF1WoRqd3aJAHsqc9NY7iL8F\")\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const fineTune = await openai.fineTunes.retrieve(\"ft-AF1WoRqd3aJAHsqc9NY7iL8F\");\n\n  console.log(fineTune);\n}\n\nmain();"
            },
            "response": "{\n  \"id\": \"ft-AF1WoRqd3aJAHsqc9NY7iL8F\",\n  \"object\": \"fine-tune\",\n  \"model\": \"curie\",\n  \"created_at\": 1614807352,\n  \"events\": [\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807352,\n      \"level\": \"info\",\n      \"message\": \"Job enqueued. Waiting for jobs ahead to complete. Queue number: 0.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807356,\n      \"level\": \"info\",\n      \"message\": \"Job started.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807861,\n      \"level\": \"info\",\n      \"message\": \"Uploaded snapshot: curie:ft-acmeco-2021-03-03-21-44-20.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807864,\n      \"level\": \"info\",\n      \"message\": \"Uploaded result files: file-abc123.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807864,\n      \"level\": \"info\",\n      \"message\": \"Job succeeded.\"\n    }\n  ],\n  \"fine_tuned_model\": \"curie:ft-acmeco-2021-03-03-21-44-20\",\n  \"hyperparams\": {\n    \"batch_size\": 4,\n    \"learning_rate_multiplier\": 0.1,\n    \"n_epochs\": 4,\n    \"prompt_loss_weight\": 0.1,\n  },\n  \"organization_id\": \"org-123\",\n  \"result_files\": [\n    {\n      \"id\": \"file-abc123\",\n      \"object\": \"file\",\n      \"bytes\": 81509,\n      \"created_at\": 1614807863,\n      \"filename\": \"compiled_results.csv\",\n      \"purpose\": \"fine-tune-results\"\n    }\n  ],\n  \"status\": \"succeeded\",\n  \"validation_files\": [],\n  \"training_files\": [\n    {\n      \"id\": \"file-abc123\",\n      \"object\": \"file\",\n      \"bytes\": 1547276,\n      \"created_at\": 1610062281,\n      \"filename\": \"my-data-train.jsonl\",\n      \"purpose\": \"fine-tune-train\"\n    }\n  ],\n  \"updated_at\": 1614807865,\n}\n"
          }
        }
      }
    },
    "/fine-tunes/{fine_tune_id}/cancel": {
      "post": {
        "tags": [
          "Fine-tunes"
        ],
        "summary": "Immediately cancel a fine-tune job.\n",
        "operationId": "cancelFineTune",
        "parameters": [
          {
            "name": "fine_tune_id",
            "in": "path",
            "required": true,
            "description": "The ID of the fine-tune job to cancel\n",
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTune"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-oaiMeta": {
          "name": "Cancel fine-tune",
          "returns": "The cancelled [fine-tune](/docs/api-reference/fine-tunes/object) object.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/fine-tunes/ft-AF1WoRqd3aJAHsqc9NY7iL8F/cancel \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTune.cancel(id=\"ft-AF1WoRqd3aJAHsqc9NY7iL8F\")\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const fineTune = await openai.fineTunes.cancel(\"ft-AF1WoRqd3aJAHsqc9NY7iL8F\");\n\n  console.log(fineTune);\n}\nmain();"
            },
            "response": "{\n  \"id\": \"ft-xhrpBbvVUzYGo8oUO1FY4nI7\",\n  \"object\": \"fine-tune\",\n  \"model\": \"curie\",\n  \"created_at\": 1614807770,\n  \"events\": [ { ... } ],\n  \"fine_tuned_model\": null,\n  \"hyperparams\": { ... },\n  \"organization_id\": \"org-123\",\n  \"result_files\": [],\n  \"status\": \"cancelled\",\n  \"validation_files\": [],\n  \"training_files\": [\n    {\n      \"id\": \"file-abc123\",\n      \"object\": \"file\",\n      \"bytes\": 1547276,\n      \"created_at\": 1610062281,\n      \"filename\": \"my-data-train.jsonl\",\n      \"purpose\": \"fine-tune-train\"\n    }\n  ],\n  \"updated_at\": 1614807789,\n}\n"
          }
        }
      }
    },
    "/fine-tunes/{fine_tune_id}/events": {
      "get": {
        "tags": [
          "Fine-tunes"
        ],
        "summary": "Get fine-grained status updates for a fine-tune job.\n",
        "operationId": "listFineTuneEvents",
        "parameters": [
          {
            "name": "fine_tune_id",
            "in": "path",
            "required": true,
            "description": "The ID of the fine-tune job to get events for.\n",
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            }
          },
          {
            "name": "stream",
            "in": "query",
            "description": "Whether to stream events for the fine-tune job. If set to true,\nevents will be sent as data-only\n[server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\nas they become available. The stream will terminate with a\n`data: [DONE]` message when the job is finished (succeeded, cancelled,\nor failed).\n\nIf set to false, only events generated so far will be returned.\n",
            "schema": {
              "type": "boolean",
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFineTuneEventsResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-oaiMeta": {
          "name": "List fine-tune events",
          "returns": "A list of fine-tune event objects.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/fine-tunes/ft-AF1WoRqd3aJAHsqc9NY7iL8F/events \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTune.list_events(id=\"ft-AF1WoRqd3aJAHsqc9NY7iL8F\")\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const fineTune = await openai.fineTunes.listEvents(\"ft-AF1WoRqd3aJAHsqc9NY7iL8F\");\n\n  console.log(fineTune);\n}\nmain();"
            },
            "response": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807352,\n      \"level\": \"info\",\n      \"message\": \"Job enqueued. Waiting for jobs ahead to complete. Queue number: 0.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807356,\n      \"level\": \"info\",\n      \"message\": \"Job started.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807861,\n      \"level\": \"info\",\n      \"message\": \"Uploaded snapshot: curie:ft-acmeco-2021-03-03-21-44-20.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807864,\n      \"level\": \"info\",\n      \"message\": \"Uploaded result files: file-abc123\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807864,\n      \"level\": \"info\",\n      \"message\": \"Job succeeded.\"\n    }\n  ]\n}\n"
          }
        }
      }
    },
    "/models": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Lists the currently available models, and provides basic information about each one such as the owner and availability.",
        "operationId": "listModels",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListModelsResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "List models",
          "returns": "A list of [model](/docs/api-reference/models/object) objects.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/models \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Model.list()\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const list = await openai.models.list();\n\n  for await (const model of list) {\n    console.log(model);\n  }\n}\nmain();"
            },
            "response": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"model-id-0\",\n      \"object\": \"model\",\n      \"created\": 1686935002,\n      \"owned_by\": \"organization-owner\"\n    },\n    {\n      \"id\": \"model-id-1\",\n      \"object\": \"model\",\n      \"created\": 1686935002,\n      \"owned_by\": \"organization-owner\",\n    },\n    {\n      \"id\": \"model-id-2\",\n      \"object\": \"model\",\n      \"created\": 1686935002,\n      \"owned_by\": \"openai\"\n    },\n  ],\n  \"object\": \"list\"\n}\n"
          }
        }
      }
    },
    "/models/{model}": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Retrieves a model instance, providing basic information about the model such as the owner and permissioning.",
        "operationId": "retrieveModel",
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "required": true,
            "description": "The ID of the model to use for this request",
            "schema": {
              "type": "string",
              "example": "gpt-3.5-turbo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Retrieve model",
          "returns": "The [model](/docs/api-reference/models/object) object matching the specified ID.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/models/VAR_model_id \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Model.retrieve(\"VAR_model_id\")\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const model = await openai.models.retrieve(\"gpt-3.5-turbo\");\n\n  console.log(model);\n}\n\nmain();"
            },
            "response": "{\n  \"id\": \"VAR_model_id\",\n  \"object\": \"model\",\n  \"created\": 1686935002,\n  \"owned_by\": \"openai\"\n}\n"
          }
        }
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.",
        "operationId": "deleteModel",
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "required": true,
            "description": "The model to delete",
            "schema": {
              "type": "string",
              "example": "ft:gpt-3.5-turbo:acemeco:suffix:abc123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteModelResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Delete fine-tune model",
          "returns": "Deletion status.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/models/ft:gpt-3.5-turbo:acemeco:suffix:abc123 \\\n  -X DELETE \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Model.delete(\"ft:gpt-3.5-turbo:acemeco:suffix:abc123\")\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const model = await openai.models.del(\"ft:gpt-3.5-turbo:acemeco:suffix:abc123\");\n\n  console.log(model);\n}\nmain();"
            },
            "response": "{\n  \"id\": \"ft:gpt-3.5-turbo:acemeco:suffix:abc123\",\n  \"object\": \"model\",\n  \"deleted\": true\n}\n"
          }
        }
      }
    },
    "/moderations": {
      "post": {
        "tags": [
          "Moderations"
        ],
        "summary": "Classifies if text violates OpenAI's Content Policy",
        "operationId": "createModeration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateModerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateModerationResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Create moderation",
          "returns": "A [moderation](/docs/api-reference/moderations/object) object.",
          "examples": {
            "request": {
              "curl": "curl https://api.openai.com/v1/moderations \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"input\": \"I want to kill them.\"\n  }'\n",
              "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Moderation.create(\n  input=\"I want to kill them.\",\n)\n",
              "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const moderation = await openai.moderations.create({ input: \"I want to kill them.\" });\n\n  console.log(moderation);\n}\nmain();\n"
            },
            "response": "{\n  \"id\": \"modr-XXXXX\",\n  \"model\": \"text-moderation-005\",\n  \"results\": [\n    {\n      \"flagged\": true,\n      \"categories\": {\n        \"sexual\": false,\n        \"hate\": false,\n        \"harassment\": false,\n        \"self-harm\": false,\n        \"sexual/minors\": false,\n        \"hate/threatening\": false,\n        \"violence/graphic\": false,\n        \"self-harm/intent\": false,\n        \"self-harm/instructions\": false,\n        \"harassment/threatening\": true,\n        \"violence\": true,\n      },\n      \"category_scores\": {\n        \"sexual\": 1.2282071e-06,\n        \"hate\": 0.010696256,\n        \"harassment\": 0.29842457,\n        \"self-harm\": 1.5236925e-08,\n        \"sexual/minors\": 5.7246268e-08,\n        \"hate/threatening\": 0.0060676364,\n        \"violence/graphic\": 4.435014e-06,\n        \"self-harm/intent\": 8.098441e-10,\n        \"self-harm/instructions\": 2.8498655e-11,\n        \"harassment/threatening\": 0.63055265,\n        \"violence\": 0.99011886,\n      }\n    }\n  ]\n}\n"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "required": [
          "type",
          "message",
          "param",
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": false
          },
          "param": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": false
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "ListModelsResponse": {
        "type": "object",
        "required": [
          "object",
          "data"
        ],
        "properties": {
          "object": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Model"
            }
          }
        }
      },
      "DeleteModelResponse": {
        "type": "object",
        "required": [
          "id",
          "object",
          "deleted"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "object": {
            "type": "string"
          }
        }
      },
      "CreateCompletionRequest": {
        "type": "object",
        "required": [
          "model",
          "prompt"
        ],
        "properties": {
          "model": {
            "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.\n",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "babbage-002",
                  "davinci-002",
                  "gpt-3.5-turbo-instruct",
                  "text-davinci-003",
                  "text-davinci-002",
                  "text-davinci-001",
                  "code-davinci-002",
                  "text-curie-001",
                  "text-babbage-001",
                  "text-ada-001"
                ]
              }
            ],
            "x-oaiTypeLabel": "string"
          },
          "prompt": {
            "description": "The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.\n\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.\n",
            "default": "<|endoftext|>",
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "default": "",
                "example": "This is a test."
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "default": "",
                  "example": "This is a test."
                }
              },
              {
                "type": "array",
                "minItems": 1,
                "example": "[1212, 318, 257, 1332, 13]",
                "items": {
                  "type": "integer"
                }
              },
              {
                "type": "array",
                "minItems": 1,
                "example": "[[1212, 318, 257, 1332, 13]]",
                "items": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "integer"
                  }
                }
              }
            ]
          },
          "best_of": {
            "type": "integer",
            "description": "Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.\n\nWhen used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n",
            "default": "1",
            "maximum": 20.0,
            "minimum": 0.0,
            "nullable": true
          },
          "echo": {
            "type": "boolean",
            "description": "Echo back the prompt in addition to the completion\n",
            "default": "false",
            "nullable": true
          },
          "frequency_penalty": {
            "type": "number",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n\n[See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)\n",
            "default": "0",
            "maximum": 2.0,
            "minimum": -2.0,
            "nullable": true
          },
          "logit_bias": {
            "type": "object",
            "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.\n",
            "nullable": true,
            "additionalProperties": {
              "type": "integer"
            },
            "x-oaiTypeLabel": "map"
          },
          "logprobs": {
            "type": "integer",
            "description": "Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.\n\nThe maximum value for `logprobs` is 5.\n",
            "maximum": 5.0,
            "minimum": 0.0,
            "nullable": true
          },
          "max_tokens": {
            "type": "integer",
            "description": "The maximum number of [tokens](/tokenizer) to generate in the completion.\n\nThe token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n",
            "default": "16",
            "minimum": 0.0,
            "nullable": true,
            "example": "16"
          },
          "n": {
            "type": "integer",
            "description": "How many completions to generate for each prompt.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n",
            "default": "1",
            "maximum": 128.0,
            "minimum": 1.0,
            "nullable": true,
            "example": "1"
          },
          "presence_penalty": {
            "type": "number",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n\n[See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)\n",
            "default": "0",
            "maximum": 2.0,
            "minimum": -2.0,
            "nullable": true
          },
          "stop": {
            "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.\n",
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "default": "<|endoftext|>",
                "nullable": true,
                "example": "\n"
              },
              {
                "type": "array",
                "maxItems": 4,
                "minItems": 1,
                "items": {
                  "type": "string",
                  "example": "[\"\\n\"]"
                }
              }
            ]
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n",
            "default": "false",
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "description": "The suffix that comes after a completion of inserted text.",
            "nullable": true,
            "example": "test."
          },
          "temperature": {
            "type": "number",
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n",
            "default": "1",
            "maximum": 2.0,
            "minimum": 0.0,
            "nullable": true,
            "example": "1"
          },
          "top_p": {
            "type": "number",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n",
            "default": "1",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "example": "1"
          },
          "user": {
            "type": "string",
            "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n",
            "example": "user-1234"
          }
        }
      },
      "CreateCompletionResponse": {
        "type": "object",
        "description": "Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).\n",
        "required": [
          "id",
          "object",
          "created",
          "model",
          "choices"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the completion."
          },
          "choices": {
            "type": "array",
            "description": "The list of completion choices the model generated for the input prompt.",
            "items": {
              "type": "object",
              "required": [
                "finish_reason",
                "index",
                "logprobs",
                "text"
              ],
              "properties": {
                "finish_reason": {
                  "type": "string",
                  "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\nor `content_filter` if content was omitted due to a flag from our content filters.\n",
                  "enum": [
                    "stop",
                    "length",
                    "content_filter"
                  ]
                },
                "index": {
                  "type": "integer"
                },
                "logprobs": {
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "text_offset": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "token_logprobs": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "tokens": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "top_logprobs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "text": {
                  "type": "string"
                }
              }
            }
          },
          "created": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) of when the completion was created."
          },
          "model": {
            "type": "string",
            "description": "The model used for completion."
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always \"text_completion\""
          },
          "usage": {
            "$ref": "#/components/schemas/CompletionUsage"
          }
        },
        "x-oaiMeta": {
          "name": "The completion object",
          "legacy": "true",
          "example": "{\n  \"id\": \"cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7\",\n  \"object\": \"text_completion\",\n  \"created\": 1589478378,\n  \"model\": \"gpt-3.5-turbo\",\n  \"choices\": [\n    {\n      \"text\": \"\\n\\nThis is indeed a test\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"finish_reason\": \"length\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 5,\n    \"completion_tokens\": 7,\n    \"total_tokens\": 12\n  }\n}\n"
        }
      },
      "ChatCompletionRequestMessage": {
        "type": "object",
        "required": [
          "content",
          "role"
        ],
        "properties": {
          "content": {
            "type": "string",
            "description": "The contents of the message. `content` is required for all messages, and may be null for assistant messages with function calls.",
            "nullable": true
          },
          "function_call": {
            "type": "object",
            "description": "The name and arguments of a function that should be called, as generated by the model.",
            "required": [
              "arguments",
              "name"
            ],
            "properties": {
              "arguments": {
                "type": "string",
                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
              },
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              }
            }
          },
          "name": {
            "type": "string",
            "description": "The name of the author of this message. `name` is required if role is `function`, and it should be the name of the function whose response is in the `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters."
          },
          "role": {
            "type": "string",
            "description": "The role of the messages author. One of `system`, `user`, `assistant`, or `function`.",
            "enum": [
              "system",
              "user",
              "assistant",
              "function"
            ]
          }
        }
      },
      "ChatCompletionFunctionParameters": {
        "type": "object",
        "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.\n\nTo describe a function that accepts no parameters, provide the value `{\"type\": \"object\", \"properties\": {}}`."
      },
      "ChatCompletionFunctions": {
        "type": "object",
        "required": [
          "name",
          "parameters"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
          },
          "parameters": {
            "$ref": "#/components/schemas/ChatCompletionFunctionParameters"
          }
        }
      },
      "ChatCompletionFunctionCallOption": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          }
        }
      },
      "ChatCompletionResponseMessage": {
        "type": "object",
        "description": "A chat completion message generated by the model.",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "content": {
            "type": "string",
            "description": "The contents of the message.",
            "nullable": true
          },
          "function_call": {
            "type": "object",
            "description": "The name and arguments of a function that should be called, as generated by the model.",
            "required": [
              "name",
              "arguments"
            ],
            "properties": {
              "arguments": {
                "type": "string",
                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
              },
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              }
            }
          },
          "role": {
            "type": "string",
            "description": "The role of the author of this message.",
            "enum": [
              "system",
              "user",
              "assistant",
              "function"
            ]
          }
        }
      },
      "ChatCompletionStreamResponseDelta": {
        "type": "object",
        "description": "A chat completion delta generated by streamed model responses.",
        "properties": {
          "content": {
            "type": "string",
            "description": "The contents of the chunk message.",
            "nullable": true
          },
          "function_call": {
            "type": "object",
            "description": "The name and arguments of a function that should be called, as generated by the model.",
            "properties": {
              "arguments": {
                "type": "string",
                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
              },
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              }
            }
          },
          "role": {
            "type": "string",
            "description": "The role of the author of this message.",
            "enum": [
              "system",
              "user",
              "assistant",
              "function"
            ]
          }
        }
      },
      "CreateChatCompletionRequest": {
        "type": "object",
        "required": [
          "model",
          "messages"
        ],
        "properties": {
          "messages": {
            "type": "array",
            "description": "A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestMessage"
            }
          },
          "model": {
            "description": "ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.",
            "example": "gpt-3.5-turbo",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "gpt-4",
                  "gpt-4-0314",
                  "gpt-4-0613",
                  "gpt-4-32k",
                  "gpt-4-32k-0314",
                  "gpt-4-32k-0613",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-16k",
                  "gpt-3.5-turbo-0301",
                  "gpt-3.5-turbo-0613",
                  "gpt-3.5-turbo-16k-0613"
                ]
              }
            ],
            "x-oaiTypeLabel": "string"
          },
          "frequency_penalty": {
            "type": "number",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n\n[See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)\n",
            "default": "0",
            "maximum": 2.0,
            "minimum": -2.0,
            "nullable": true
          },
          "function_call": {
            "description": "Controls how the model calls functions. \"none\" means the model will not call a function and instead generates a message. \"auto\" means the model can pick between generating a message or calling a function.  Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function. \"none\" is the default when no functions are present. \"auto\" is the default if functions are present.\n",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "none",
                  "auto"
                ]
              },
              {
                "$ref": "#/components/schemas/ChatCompletionFunctionCallOption"
              }
            ]
          },
          "functions": {
            "type": "array",
            "description": "A list of functions the model may generate JSON inputs for.",
            "maxItems": 128,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/ChatCompletionFunctions"
            }
          },
          "logit_bias": {
            "type": "object",
            "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n",
            "nullable": true,
            "additionalProperties": {
              "type": "integer"
            },
            "x-oaiTypeLabel": "map"
          },
          "max_tokens": {
            "type": "integer",
            "description": "The maximum number of [tokens](/tokenizer) to generate in the chat completion.\n\nThe total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n",
            "default": "inf",
            "nullable": true
          },
          "n": {
            "type": "integer",
            "description": "How many chat completion choices to generate for each input message.",
            "default": "1",
            "maximum": 128.0,
            "minimum": 1.0,
            "nullable": true,
            "example": "1"
          },
          "presence_penalty": {
            "type": "number",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n\n[See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)\n",
            "default": "0",
            "maximum": 2.0,
            "minimum": -2.0,
            "nullable": true
          },
          "stop": {
            "description": "Up to 4 sequences where the API will stop generating further tokens.\n",
            "oneOf": [
              {
                "type": "string",
                "nullable": true
              },
              {
                "type": "array",
                "maxItems": 4,
                "minItems": 1,
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "stream": {
            "type": "boolean",
            "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n",
            "default": "false",
            "nullable": true
          },
          "temperature": {
            "type": "number",
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n",
            "default": "1",
            "maximum": 2.0,
            "minimum": 0.0,
            "nullable": true,
            "example": "1"
          },
          "top_p": {
            "type": "number",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n",
            "default": "1",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "example": "1"
          },
          "user": {
            "type": "string",
            "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n",
            "example": "user-1234"
          }
        }
      },
      "CreateChatCompletionResponse": {
        "type": "object",
        "description": "Represents a chat completion response returned by model, based on the provided input.",
        "required": [
          "choices",
          "created",
          "id",
          "model",
          "object"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the chat completion."
          },
          "choices": {
            "type": "array",
            "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1.",
            "items": {
              "type": "object",
              "required": [
                "finish_reason",
                "index",
                "message"
              ],
              "properties": {
                "finish_reason": {
                  "type": "string",
                  "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\nor `function_call` if the model called a function.\n",
                  "enum": [
                    "stop",
                    "length",
                    "function_call",
                    "content_filter"
                  ]
                },
                "index": {
                  "type": "integer",
                  "description": "The index of the choice in the list of choices."
                },
                "message": {
                  "$ref": "#/components/schemas/ChatCompletionResponseMessage"
                }
              }
            }
          },
          "created": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created."
          },
          "model": {
            "type": "string",
            "description": "The model used for the chat completion."
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always `chat.completion`."
          },
          "usage": {
            "$ref": "#/components/schemas/CompletionUsage"
          }
        },
        "x-oaiMeta": {
          "name": "The chat completion object",
          "group": "chat",
          "example": "{\n  \"id\": \"chatcmpl-123\",\n  \"object\": \"chat.completion\",\n  \"created\": 1677652288,\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"choices\": [{\n    \"index\": 0,\n    \"message\": {\n      \"role\": \"assistant\",\n      \"content\": \"\\n\\nHello there, how may I assist you today?\",\n    },\n    \"finish_reason\": \"stop\"\n  }],\n  \"usage\": {\n    \"prompt_tokens\": 9,\n    \"completion_tokens\": 12,\n    \"total_tokens\": 21\n  }\n}\n"
        }
      },
      "CreateChatCompletionFunctionResponse": {
        "type": "object",
        "description": "Represents a chat completion response returned by model, based on the provided input.",
        "required": [
          "choices",
          "created",
          "id",
          "model",
          "object"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the chat completion."
          },
          "choices": {
            "type": "array",
            "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1.",
            "items": {
              "type": "object",
              "required": [
                "finish_reason",
                "index",
                "message"
              ],
              "properties": {
                "finish_reason": {
                  "type": "string",
                  "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.\n",
                  "enum": [
                    "stop",
                    "length",
                    "function_call",
                    "content_filter"
                  ]
                },
                "index": {
                  "type": "integer",
                  "description": "The index of the choice in the list of choices."
                },
                "message": {
                  "$ref": "#/components/schemas/ChatCompletionResponseMessage"
                }
              }
            }
          },
          "created": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created."
          },
          "model": {
            "type": "string",
            "description": "The model used for the chat completion."
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always `chat.completion`."
          },
          "usage": {
            "$ref": "#/components/schemas/CompletionUsage"
          }
        },
        "x-oaiMeta": {
          "name": "The chat completion object",
          "group": "chat",
          "example": "{\n  \"choices\": [\n    {\n      \"finish_reason\": \"function_call\",\n      \"index\": 0,\n      \"message\": {\n        \"content\": null,\n        \"function_call\": {\n          \"arguments\": \"{\\n  \\\"location\\\": \\\"Boston, MA\\\"\\n}\",\n          \"name\": \"get_current_weather\"\n        },\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1694028367,\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"object\": \"chat.completion\",\n  \"usage\": {\n    \"completion_tokens\": 18,\n    \"prompt_tokens\": 82,\n    \"total_tokens\": 100\n  }\n}\n"
        }
      },
      "ListPaginatedFineTuningJobsResponse": {
        "type": "object",
        "required": [
          "object",
          "data",
          "has_more"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FineTuningJob"
            }
          },
          "has_more": {
            "type": "boolean"
          },
          "object": {
            "type": "string"
          }
        }
      },
      "CreateChatCompletionStreamResponse": {
        "type": "object",
        "description": "Represents a streamed chunk of a chat completion response returned by model, based on the provided input.",
        "required": [
          "choices",
          "created",
          "id",
          "model",
          "object"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the chat completion. Each chunk has the same ID."
          },
          "choices": {
            "type": "array",
            "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1.",
            "items": {
              "type": "object",
              "required": [
                "delta",
                "finish_reason",
                "index"
              ],
              "properties": {
                "delta": {
                  "$ref": "#/components/schemas/ChatCompletionStreamResponseDelta"
                },
                "finish_reason": {
                  "type": "string",
                  "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\nor `function_call` if the model called a function.\n",
                  "nullable": true,
                  "enum": [
                    "stop",
                    "length",
                    "function_call",
                    "content_filter"
                  ]
                },
                "index": {
                  "type": "integer",
                  "description": "The index of the choice in the list of choices."
                }
              }
            }
          },
          "created": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp."
          },
          "model": {
            "type": "string",
            "description": "The model to generate the completion."
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always `chat.completion.chunk`."
          }
        },
        "x-oaiMeta": {
          "name": "The chat completion chunk object",
          "group": "chat",
          "example": "{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\",\"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":\"\"},\"finish_reason\":null}]}\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"Hello\"},\"finish_reason\":null}]}\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"!\"},\"finish_reason\":null}]}\n\n....\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" today\"},\"finish_reason\":null}]}\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"?\"},\"finish_reason\":null}]}\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\",\"choices\":[{\"index\":0,\"delta\":{},\"finish_reason\":\"stop\"}]}\n"
        }
      },
      "CreateEditRequest": {
        "type": "object",
        "required": [
          "model",
          "instruction"
        ],
        "properties": {
          "instruction": {
            "type": "string",
            "description": "The instruction that tells the model how to edit the prompt.",
            "example": "Fix the spelling mistakes."
          },
          "model": {
            "description": "ID of the model to use. You can use the `text-davinci-edit-001` or `code-davinci-edit-001` model with this endpoint.",
            "example": "text-davinci-edit-001",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "text-davinci-edit-001",
                  "code-davinci-edit-001"
                ]
              }
            ],
            "x-oaiTypeLabel": "string"
          },
          "input": {
            "type": "string",
            "description": "The input text to use as a starting point for the edit.",
            "default": "",
            "nullable": true,
            "example": "What day of the wek is it?"
          },
          "n": {
            "type": "integer",
            "description": "How many edits to generate for the input and instruction.",
            "default": "1",
            "maximum": 20.0,
            "minimum": 1.0,
            "nullable": true,
            "example": "1"
          },
          "temperature": {
            "type": "number",
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n",
            "default": "1",
            "maximum": 2.0,
            "minimum": 0.0,
            "nullable": true,
            "example": "1"
          },
          "top_p": {
            "type": "number",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n",
            "default": "1",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "example": "1"
          }
        }
      },
      "CreateEditResponse": {
        "title": "Edit",
        "type": "object",
        "deprecated": true,
        "required": [
          "object",
          "created",
          "choices",
          "usage"
        ],
        "properties": {
          "choices": {
            "type": "array",
            "description": "A list of edit choices. Can be more than one if `n` is greater than 1.",
            "items": {
              "type": "object",
              "required": [
                "text",
                "index",
                "finish_reason"
              ],
              "properties": {
                "finish_reason": {
                  "type": "string",
                  "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\nor `content_filter` if content was omitted due to a flag from our content filters.\n",
                  "enum": [
                    "stop",
                    "length"
                  ]
                },
                "index": {
                  "type": "integer",
                  "description": "The index of the choice in the list of choices."
                },
                "text": {
                  "type": "string",
                  "description": "The edited result."
                }
              }
            }
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always `edit`."
          },
          "created": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) of when the edit was created."
          },
          "usage": {
            "$ref": "#/components/schemas/CompletionUsage"
          }
        },
        "x-oaiMeta": {
          "name": "The edit object",
          "example": "{\n  \"object\": \"edit\",\n  \"created\": 1589478378,\n  \"choices\": [\n    {\n      \"text\": \"What day of the week is it?\",\n      \"index\": 0,\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 25,\n    \"completion_tokens\": 32,\n    \"total_tokens\": 57\n  }\n}\n"
        }
      },
      "CreateImageRequest": {
        "type": "object",
        "required": [
          "prompt"
        ],
        "properties": {
          "prompt": {
            "type": "string",
            "description": "A text description of the desired image(s). The maximum length is 1000 characters.",
            "example": "A cute baby sea otter"
          },
          "n": {
            "type": "integer",
            "description": "The number of images to generate. Must be between 1 and 10.",
            "default": "1",
            "maximum": 10.0,
            "minimum": 1.0,
            "nullable": true,
            "example": "1"
          },
          "response_format": {
            "type": "string",
            "description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`.",
            "default": "url",
            "nullable": true,
            "example": "url",
            "enum": [
              "url",
              "b64_json"
            ]
          },
          "size": {
            "type": "string",
            "description": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.",
            "default": "1024x1024",
            "nullable": true,
            "example": "1024x1024",
            "enum": [
              "256x256",
              "512x512",
              "1024x1024"
            ]
          },
          "user": {
            "type": "string",
            "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n",
            "example": "user-1234"
          }
        }
      },
      "ImagesResponse": {
        "required": [
          "created",
          "data"
        ],
        "properties": {
          "created": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        }
      },
      "Image": {
        "type": "object",
        "description": "Represents the url or the content of an image generated by the OpenAI API.",
        "properties": {
          "b64_json": {
            "type": "string",
            "description": "The base64-encoded JSON of the generated image, if `response_format` is `b64_json`."
          },
          "url": {
            "type": "string",
            "description": "The URL of the generated image, if `response_format` is `url` (default)."
          }
        },
        "x-oaiMeta": {
          "name": "The image object",
          "example": "{\n  \"url\": \"...\"\n}\n"
        }
      },
      "CreateImageEditRequest": {
        "type": "object",
        "required": [
          "prompt",
          "image"
        ],
        "properties": {
          "image": {
            "type": "string",
            "description": "The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.",
            "format": "binary"
          },
          "prompt": {
            "type": "string",
            "description": "A text description of the desired image(s). The maximum length is 1000 characters.",
            "example": "A cute baby sea otter wearing a beret"
          },
          "mask": {
            "type": "string",
            "description": "An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.",
            "format": "binary"
          },
          "n": {
            "type": "integer",
            "description": "The number of images to generate. Must be between 1 and 10.",
            "default": "1",
            "maximum": 10.0,
            "minimum": 1.0,
            "nullable": true,
            "example": "1"
          },
          "size": {
            "type": "string",
            "description": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.",
            "default": "1024x1024",
            "nullable": true,
            "example": "1024x1024",
            "enum": [
              "256x256",
              "512x512",
              "1024x1024"
            ]
          },
          "response_format": {
            "type": "string",
            "description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`.",
            "default": "url",
            "nullable": true,
            "example": "url",
            "enum": [
              "url",
              "b64_json"
            ]
          },
          "user": {
            "type": "string",
            "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n",
            "example": "user-1234"
          }
        }
      },
      "CreateImageVariationRequest": {
        "type": "object",
        "required": [
          "image"
        ],
        "properties": {
          "image": {
            "type": "string",
            "description": "The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.",
            "format": "binary"
          },
          "n": {
            "type": "integer",
            "description": "The number of images to generate. Must be between 1 and 10.",
            "default": "1",
            "maximum": 10.0,
            "minimum": 1.0,
            "nullable": true,
            "example": "1"
          },
          "response_format": {
            "type": "string",
            "description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`.",
            "default": "url",
            "nullable": true,
            "example": "url",
            "enum": [
              "url",
              "b64_json"
            ]
          },
          "size": {
            "type": "string",
            "description": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.",
            "default": "1024x1024",
            "nullable": true,
            "example": "1024x1024",
            "enum": [
              "256x256",
              "512x512",
              "1024x1024"
            ]
          },
          "user": {
            "type": "string",
            "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n",
            "example": "user-1234"
          }
        }
      },
      "CreateModerationRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "input": {
            "description": "The input text to classify",
            "oneOf": [
              {
                "type": "string",
                "default": "",
                "example": "I want to kill them."
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "default": "",
                  "example": "I want to kill them."
                }
              }
            ]
          },
          "model": {
            "description": "Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.\n\nThe default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.\n",
            "default": "text-moderation-latest",
            "nullable": false,
            "example": "text-moderation-stable",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "text-moderation-latest",
                  "text-moderation-stable"
                ]
              }
            ],
            "x-oaiTypeLabel": "string"
          }
        }
      },
      "CreateModerationResponse": {
        "type": "object",
        "description": "Represents policy compliance report by OpenAI's content moderation model against a given input.",
        "required": [
          "id",
          "model",
          "results"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the moderation request."
          },
          "model": {
            "type": "string",
            "description": "The model used to generate the moderation results."
          },
          "results": {
            "type": "array",
            "description": "A list of moderation objects.",
            "items": {
              "type": "object",
              "required": [
                "flagged",
                "categories",
                "category_scores"
              ],
              "properties": {
                "flagged": {
                  "type": "boolean",
                  "description": "Whether the content violates [OpenAI's usage policies](/policies/usage-policies)."
                },
                "categories": {
                  "type": "object",
                  "description": "A list of the categories, and whether they are flagged or not.",
                  "required": [
                    "hate",
                    "hate/threatening",
                    "harassment",
                    "harassment/threatening",
                    "self-harm",
                    "self-harm/intent",
                    "self-harm/instructions",
                    "sexual",
                    "sexual/minors",
                    "violence",
                    "violence/graphic"
                  ],
                  "properties": {
                    "hate": {
                      "type": "boolean",
                      "description": "Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harrassment."
                    },
                    "hate/threatening": {
                      "type": "boolean",
                      "description": "Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste."
                    },
                    "harassment": {
                      "type": "boolean",
                      "description": "Content that expresses, incites, or promotes harassing language towards any target."
                    },
                    "harassment/threatening": {
                      "type": "boolean",
                      "description": "Harassment content that also includes violence or serious harm towards any target."
                    },
                    "self-harm": {
                      "type": "boolean",
                      "description": "Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders."
                    },
                    "self-harm/intent": {
                      "type": "boolean",
                      "description": "Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders."
                    },
                    "self-harm/instructions": {
                      "type": "boolean",
                      "description": "Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts."
                    },
                    "sexual": {
                      "type": "boolean",
                      "description": "Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness)."
                    },
                    "sexual/minors": {
                      "type": "boolean",
                      "description": "Sexual content that includes an individual who is under 18 years old."
                    },
                    "violence": {
                      "type": "boolean",
                      "description": "Content that depicts death, violence, or physical injury."
                    },
                    "violence/graphic": {
                      "type": "boolean",
                      "description": "Content that depicts death, violence, or physical injury in graphic detail."
                    }
                  }
                },
                "category_scores": {
                  "type": "object",
                  "description": "A list of the categories along with their scores as predicted by model.",
                  "required": [
                    "hate",
                    "hate/threatening",
                    "harassment",
                    "harassment/threatening",
                    "self-harm",
                    "self-harm/intent",
                    "self-harm/instructions",
                    "sexual",
                    "sexual/minors",
                    "violence",
                    "violence/graphic"
                  ],
                  "properties": {
                    "hate": {
                      "type": "number",
                      "description": "The score for the category 'hate'."
                    },
                    "hate/threatening": {
                      "type": "number",
                      "description": "The score for the category 'hate/threatening'."
                    },
                    "harassment": {
                      "type": "number",
                      "description": "The score for the category 'harassment'."
                    },
                    "harassment/threatening": {
                      "type": "number",
                      "description": "The score for the category 'harassment/threatening'."
                    },
                    "self-harm": {
                      "type": "number",
                      "description": "The score for the category 'self-harm'."
                    },
                    "self-harm/intent": {
                      "type": "number",
                      "description": "The score for the category 'self-harm/intent'."
                    },
                    "self-harm/instructions": {
                      "type": "number",
                      "description": "The score for the category 'self-harm/instructions'."
                    },
                    "sexual": {
                      "type": "number",
                      "description": "The score for the category 'sexual'."
                    },
                    "sexual/minors": {
                      "type": "number",
                      "description": "The score for the category 'sexual/minors'."
                    },
                    "violence": {
                      "type": "number",
                      "description": "The score for the category 'violence'."
                    },
                    "violence/graphic": {
                      "type": "number",
                      "description": "The score for the category 'violence/graphic'."
                    }
                  }
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "The moderation object",
          "example": "{\n  \"id\": \"modr-XXXXX\",\n  \"model\": \"text-moderation-005\",\n  \"results\": [\n    {\n      \"flagged\": true,\n      \"categories\": {\n        \"sexual\": false,\n        \"hate\": false,\n        \"harassment\": false,\n        \"self-harm\": false,\n        \"sexual/minors\": false,\n        \"hate/threatening\": false,\n        \"violence/graphic\": false,\n        \"self-harm/intent\": false,\n        \"self-harm/instructions\": false,\n        \"harassment/threatening\": true,\n        \"violence\": true,\n      },\n      \"category_scores\": {\n        \"sexual\": 1.2282071e-06,\n        \"hate\": 0.010696256,\n        \"harassment\": 0.29842457,\n        \"self-harm\": 1.5236925e-08,\n        \"sexual/minors\": 5.7246268e-08,\n        \"hate/threatening\": 0.0060676364,\n        \"violence/graphic\": 4.435014e-06,\n        \"self-harm/intent\": 8.098441e-10,\n        \"self-harm/instructions\": 2.8498655e-11,\n        \"harassment/threatening\": 0.63055265,\n        \"violence\": 0.99011886,\n      }\n    }\n  ]\n}\n"
        }
      },
      "ListFilesResponse": {
        "type": "object",
        "required": [
          "object",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIFile"
            }
          },
          "object": {
            "type": "string"
          }
        }
      },
      "CreateFileRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "file",
          "purpose"
        ],
        "properties": {
          "file": {
            "type": "string",
            "description": "The file object (not file name) to be uploaded.\n\nIf the `purpose` is set to \"fine-tune\", the file will be used for fine-tuning.\n",
            "format": "binary"
          },
          "purpose": {
            "type": "string",
            "description": "The intended purpose of the uploaded file.\n\nUse \"fine-tune\" for [fine-tuning](/docs/api-reference/fine-tuning). This allows us to validate the format of the uploaded file is correct for fine-tuning.\n"
          }
        }
      },
      "DeleteFileResponse": {
        "type": "object",
        "required": [
          "id",
          "object",
          "deleted"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          }
        }
      },
      "CreateFineTuningJobRequest": {
        "type": "object",
        "required": [
          "model",
          "training_file"
        ],
        "properties": {
          "model": {
            "description": "The name of the model to fine-tune. You can select one of the\n[supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned).\n",
            "example": "gpt-3.5-turbo",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "babbage-002",
                  "davinci-002",
                  "gpt-3.5-turbo"
                ]
              }
            ],
            "x-oaiTypeLabel": "string"
          },
          "training_file": {
            "type": "string",
            "description": "The ID of an uploaded file that contains training data.\n\nSee [upload file](/docs/api-reference/files/upload) for how to upload a file.\n\nYour dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning) for more details.\n",
            "example": "file-abc123"
          },
          "hyperparameters": {
            "type": "object",
            "description": "The hyperparameters used for the fine-tuning job.",
            "properties": {
              "n_epochs": {
                "description": "The number of epochs to train the model for. An epoch refers to one\nfull cycle through the training dataset.\n",
                "default": "auto",
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "integer",
                    "maximum": 50.0,
                    "minimum": 1.0
                  }
                ]
              }
            }
          },
          "suffix": {
            "type": "string",
            "description": "A string of up to 18 characters that will be added to your fine-tuned model name.\n\nFor example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`.\n",
            "maxLength": 40,
            "minLength": 1,
            "nullable": true
          },
          "validation_file": {
            "type": "string",
            "description": "The ID of an uploaded file that contains validation data.\n\nIf you provide this file, the data is used to generate validation\nmetrics periodically during fine-tuning. These metrics can be viewed in\nthe fine-tuning results file.\nThe same data should not be present in both train and validation files.\n\nYour dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning) for more details.\n",
            "nullable": true,
            "example": "file-abc123"
          }
        }
      },
      "ListFineTuningJobEventsResponse": {
        "type": "object",
        "required": [
          "object",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FineTuningJobEvent"
            }
          },
          "object": {
            "type": "string"
          }
        }
      },
      "CreateFineTuneRequest": {
        "type": "object",
        "required": [
          "training_file"
        ],
        "properties": {
          "training_file": {
            "type": "string",
            "description": "The ID of an uploaded file that contains training data.\n\nSee [upload file](/docs/api-reference/files/upload) for how to upload a file.\n\nYour dataset must be formatted as a JSONL file, where each training\nexample is a JSON object with the keys \"prompt\" and \"completion\".\nAdditionally, you must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details.\n",
            "example": "file-abc123"
          },
          "batch_size": {
            "type": "integer",
            "description": "The batch size to use for training. The batch size is the number of\ntraining examples used to train a single forward and backward pass.\n\nBy default, the batch size will be dynamically configured to be\n~0.2% of the number of examples in the training set, capped at 256 -\nin general, we've found that larger batch sizes tend to work better\nfor larger datasets.\n",
            "nullable": true
          },
          "classification_betas": {
            "type": "array",
            "description": "If this is provided, we calculate F-beta scores at the specified\nbeta values. The F-beta score is a generalization of F-1 score.\nThis is only used for binary classification.\n\nWith a beta of 1 (i.e. the F-1 score), precision and recall are\ngiven the same weight. A larger beta score puts more weight on\nrecall and less on precision. A smaller beta score puts more weight\non precision and less on recall.\n",
            "nullable": true,
            "example": [
              "0.6",
              "1",
              "1.5",
              "2"
            ],
            "items": {
              "type": "number"
            }
          },
          "classification_n_classes": {
            "type": "integer",
            "description": "The number of classes in a classification task.\n\nThis parameter is required for multiclass classification.\n",
            "nullable": true
          },
          "classification_positive_class": {
            "type": "string",
            "description": "The positive class in binary classification.\n\nThis parameter is needed to generate precision, recall, and F1\nmetrics when doing binary classification.\n",
            "nullable": true
          },
          "compute_classification_metrics": {
            "type": "boolean",
            "description": "If set, we calculate classification-specific metrics such as accuracy\nand F-1 score using the validation set at the end of every epoch.\nThese metrics can be viewed in the [results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).\n\nIn order to compute classification metrics, you must provide a\n`validation_file`. Additionally, you must\nspecify `classification_n_classes` for multiclass classification or\n`classification_positive_class` for binary classification.\n",
            "default": "false",
            "nullable": true
          },
          "hyperparameters": {
            "type": "object",
            "description": "The hyperparameters used for the fine-tuning job.",
            "properties": {
              "n_epochs": {
                "description": "The number of epochs to train the model for. An epoch refers to one\nfull cycle through the training dataset.\n",
                "default": "auto",
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "integer",
                    "maximum": 50.0,
                    "minimum": 1.0
                  }
                ]
              }
            }
          },
          "learning_rate_multiplier": {
            "type": "number",
            "description": "The learning rate multiplier to use for training.\nThe fine-tuning learning rate is the original learning rate used for\npretraining multiplied by this value.\n\nBy default, the learning rate multiplier is the 0.05, 0.1, or 0.2\ndepending on final `batch_size` (larger learning rates tend to\nperform better with larger batch sizes). We recommend experimenting\nwith values in the range 0.02 to 0.2 to see what produces the best\nresults.\n",
            "nullable": true
          },
          "model": {
            "description": "The name of the base model to fine-tune. You can select one of \"ada\",\n\"babbage\", \"curie\", \"davinci\", or a fine-tuned model created after 2022-04-21 and before 2023-08-22.\nTo learn more about these models, see the\n[Models](/docs/models) documentation.\n",
            "default": "curie",
            "nullable": true,
            "example": "curie",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "ada",
                  "babbage",
                  "curie",
                  "davinci"
                ]
              }
            ],
            "x-oaiTypeLabel": "string"
          },
          "prompt_loss_weight": {
            "type": "number",
            "description": "The weight to use for loss on the prompt tokens. This controls how\nmuch the model tries to learn to generate the prompt (as compared\nto the completion which always has a weight of 1.0), and can add\na stabilizing effect to training when completions are short.\n\nIf prompts are extremely long (relative to completions), it may make\nsense to reduce this weight so as to avoid over-prioritizing\nlearning the prompt.\n",
            "default": "0.01",
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "description": "A string of up to 40 characters that will be added to your fine-tuned model name.\n\nFor example, a `suffix` of \"custom-model-name\" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.\n",
            "maxLength": 40,
            "minLength": 1,
            "nullable": true
          },
          "validation_file": {
            "type": "string",
            "description": "The ID of an uploaded file that contains validation data.\n\nIf you provide this file, the data is used to generate validation\nmetrics periodically during fine-tuning. These metrics can be viewed in\nthe [fine-tuning results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).\nYour train and validation data should be mutually exclusive.\n\nYour dataset must be formatted as a JSONL file, where each validation\nexample is a JSON object with the keys \"prompt\" and \"completion\".\nAdditionally, you must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details.\n",
            "nullable": true,
            "example": "file-abc123"
          }
        }
      },
      "ListFineTunesResponse": {
        "type": "object",
        "required": [
          "object",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FineTune"
            }
          },
          "object": {
            "type": "string"
          }
        }
      },
      "ListFineTuneEventsResponse": {
        "type": "object",
        "required": [
          "object",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FineTuneEvent"
            }
          },
          "object": {
            "type": "string"
          }
        }
      },
      "CreateEmbeddingRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "model",
          "input"
        ],
        "properties": {
          "input": {
            "description": "Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`) and cannot be an empty string. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n",
            "example": "The quick brown fox jumped over the lazy dog",
            "oneOf": [
              {
                "type": "string",
                "default": "",
                "example": "This is a test."
              },
              {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "string",
                  "default": "",
                  "example": "This is a test."
                }
              },
              {
                "type": "array",
                "minItems": 1,
                "example": "[1212, 318, 257, 1332, 13]",
                "items": {
                  "type": "integer"
                }
              },
              {
                "type": "array",
                "minItems": 1,
                "example": "[[1212, 318, 257, 1332, 13]]",
                "items": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "integer"
                  }
                }
              }
            ]
          },
          "model": {
            "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.\n",
            "example": "text-embedding-ada-002",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "text-embedding-ada-002"
                ]
              }
            ],
            "x-oaiTypeLabel": "string"
          },
          "encoding_format": {
            "type": "string",
            "description": "The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).",
            "default": "float",
            "example": "float",
            "enum": [
              "float",
              "base64"
            ]
          },
          "user": {
            "type": "string",
            "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n",
            "example": "user-1234"
          }
        }
      },
      "CreateEmbeddingResponse": {
        "type": "object",
        "required": [
          "object",
          "model",
          "data",
          "usage"
        ],
        "properties": {
          "data": {
            "type": "array",
            "description": "The list of embeddings generated by the model.",
            "items": {
              "$ref": "#/components/schemas/Embedding"
            }
          },
          "model": {
            "type": "string",
            "description": "The name of the model used to generate the embedding."
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always \"embedding\"."
          },
          "usage": {
            "type": "object",
            "description": "The usage information for the request.",
            "required": [
              "prompt_tokens",
              "total_tokens"
            ],
            "properties": {
              "prompt_tokens": {
                "type": "integer",
                "description": "The number of tokens used by the prompt."
              },
              "total_tokens": {
                "type": "integer",
                "description": "The total number of tokens used by the request."
              }
            }
          }
        }
      },
      "CreateTranscriptionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "file",
          "model"
        ],
        "properties": {
          "file": {
            "type": "string",
            "description": "The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n",
            "format": "binary",
            "x-oaiTypeLabel": "file"
          },
          "model": {
            "description": "ID of the model to use. Only `whisper-1` is currently available.\n",
            "example": "whisper-1",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "whisper-1"
                ]
              }
            ],
            "x-oaiTypeLabel": "string"
          },
          "language": {
            "type": "string",
            "description": "The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.\n"
          },
          "prompt": {
            "type": "string",
            "description": "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.\n"
          },
          "response_format": {
            "type": "string",
            "description": "The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.\n",
            "default": "json",
            "enum": [
              "json",
              "text",
              "srt",
              "verbose_json",
              "vtt"
            ]
          },
          "temperature": {
            "type": "number",
            "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n",
            "default": "0"
          }
        }
      },
      "CreateTranscriptionResponse": {
        "type": "object",
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string"
          }
        }
      },
      "CreateTranslationRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "file",
          "model"
        ],
        "properties": {
          "file": {
            "type": "string",
            "description": "The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n",
            "format": "binary",
            "x-oaiTypeLabel": "file"
          },
          "model": {
            "description": "ID of the model to use. Only `whisper-1` is currently available.\n",
            "example": "whisper-1",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "whisper-1"
                ]
              }
            ],
            "x-oaiTypeLabel": "string"
          },
          "prompt": {
            "type": "string",
            "description": "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.\n"
          },
          "response_format": {
            "type": "string",
            "description": "The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.\n",
            "default": "json"
          },
          "temperature": {
            "type": "number",
            "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n",
            "default": "0"
          }
        }
      },
      "CreateTranslationResponse": {
        "type": "object",
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string"
          }
        }
      },
      "Model": {
        "title": "Model",
        "description": "Describes an OpenAI model offering that can be used with the API.",
        "required": [
          "id",
          "object",
          "created",
          "owned_by"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The model identifier, which can be referenced in the API endpoints."
          },
          "created": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) when the model was created."
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always \"model\"."
          },
          "owned_by": {
            "type": "string",
            "description": "The organization that owns the model."
          }
        },
        "x-oaiMeta": {
          "name": "The model object",
          "example": "{\n  \"id\": \"VAR_model_id\",\n  \"object\": \"model\",\n  \"created\": 1686935002,\n  \"owned_by\": \"openai\"\n}\n"
        }
      },
      "OpenAIFile": {
        "title": "OpenAIFile",
        "description": "The `File` object represents a document that has been uploaded to OpenAI.\n",
        "required": [
          "id",
          "object",
          "bytes",
          "created_at",
          "filename",
          "purpose",
          "format"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The file identifier, which can be referenced in the API endpoints."
          },
          "bytes": {
            "type": "integer",
            "description": "The size of the file in bytes."
          },
          "created_at": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) for when the file was created."
          },
          "filename": {
            "type": "string",
            "description": "The name of the file."
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always \"file\"."
          },
          "purpose": {
            "type": "string",
            "description": "The intended purpose of the file. Currently, only \"fine-tune\" is supported."
          },
          "status": {
            "type": "string",
            "description": "The current status of the file, which can be either `uploaded`, `processed`, `pending`, `error`, `deleting` or `deleted`."
          },
          "status_details": {
            "type": "string",
            "description": "Additional details about the status of the file. If the file is in the `error` state, this will include a message describing the error.\n",
            "nullable": true
          }
        },
        "x-oaiMeta": {
          "name": "The file object",
          "example": "{\n  \"id\": \"file-abc123\",\n  \"object\": \"file\",\n  \"bytes\": 120000,\n  \"created_at\": 1677610602,\n  \"filename\": \"my_file.jsonl\",\n  \"purpose\": \"fine-tune\",\n  \"status\": \"uploaded\",\n  \"status_details\": null\n}\n"
        }
      },
      "Embedding": {
        "type": "object",
        "description": "Represents an embedding vector returned by embedding endpoint.\n",
        "required": [
          "index",
          "object",
          "embedding"
        ],
        "properties": {
          "index": {
            "type": "integer",
            "description": "The index of the embedding in the list of embeddings."
          },
          "embedding": {
            "type": "array",
            "description": "The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).\n",
            "items": {
              "type": "number"
            }
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always \"embedding\"."
          }
        },
        "x-oaiMeta": {
          "name": "The embedding object",
          "example": "{\n  \"object\": \"embedding\",\n  \"embedding\": [\n    0.0023064255,\n    -0.009327292,\n    .... (1536 floats total for ada-002)\n    -0.0028842222,\n  ],\n  \"index\": 0\n}\n"
        }
      },
      "FineTuningJob": {
        "title": "FineTuningJob",
        "type": "object",
        "description": "The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.\n",
        "required": [
          "created_at",
          "error",
          "finished_at",
          "fine_tuned_model",
          "hyperparameters",
          "id",
          "model",
          "object",
          "organization_id",
          "result_files",
          "status",
          "trained_tokens",
          "training_file",
          "validation_file"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The object identifier, which can be referenced in the API endpoints."
          },
          "created_at": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) for when the fine-tuning job was created."
          },
          "error": {
            "type": "object",
            "description": "For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.",
            "nullable": true,
            "required": [
              "code",
              "message",
              "param"
            ],
            "properties": {
              "code": {
                "type": "string",
                "description": "A machine-readable error code."
              },
              "message": {
                "type": "string",
                "description": "A human-readable error message."
              },
              "param": {
                "type": "string",
                "description": "The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.",
                "nullable": true
              }
            }
          },
          "fine_tuned_model": {
            "type": "string",
            "description": "The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.",
            "nullable": true
          },
          "finished_at": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.",
            "nullable": true
          },
          "hyperparameters": {
            "type": "object",
            "description": "The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.",
            "required": [
              "n_epochs"
            ],
            "properties": {
              "n_epochs": {
                "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n\"auto\" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.",
                "default": "auto",
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "integer",
                    "maximum": 50.0,
                    "minimum": 1.0
                  }
                ]
              }
            }
          },
          "model": {
            "type": "string",
            "description": "The base model that is being fine-tuned."
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always \"fine_tuning.job\"."
          },
          "organization_id": {
            "type": "string",
            "description": "The organization that owns the fine-tuning job."
          },
          "result_files": {
            "type": "array",
            "description": "The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).",
            "items": {
              "type": "string",
              "example": "file-abc123"
            }
          },
          "status": {
            "type": "string",
            "description": "The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`."
          },
          "trained_tokens": {
            "type": "integer",
            "description": "The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.",
            "nullable": true
          },
          "training_file": {
            "type": "string",
            "description": "The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents)."
          },
          "validation_file": {
            "type": "string",
            "description": "The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).",
            "nullable": true
          }
        },
        "x-oaiMeta": {
          "name": "The fine-tuning job object",
          "example": "{\n  \"object\": \"fine_tuning.job\",\n  \"id\": \"ftjob-abc123\",\n  \"model\": \"davinci-002\",\n  \"created_at\": 1692661014,\n  \"finished_at\": 1692661190,\n  \"fine_tuned_model\": \"ft:davinci-002:my-org:custom_suffix:7q8mpxmy\",\n  \"organization_id\": \"org-123\",\n  \"result_files\": [\n      \"file-abc123\"\n  ],\n  \"status\": \"succeeded\",\n  \"validation_file\": null,\n  \"training_file\": \"file-abc123\",\n  \"hyperparameters\": {\n      \"n_epochs\": 4,\n  },\n  \"trained_tokens\": 5768\n}\n"
        }
      },
      "FineTuningJobEvent": {
        "type": "object",
        "description": "Fine-tuning job event object",
        "required": [
          "id",
          "object",
          "created_at",
          "level",
          "message"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "integer"
          },
          "level": {
            "type": "string",
            "enum": [
              "info",
              "warn",
              "error"
            ]
          },
          "message": {
            "type": "string"
          },
          "object": {
            "type": "string"
          }
        },
        "x-oaiMeta": {
          "name": "The fine-tuning job event object",
          "example": "{\n  \"object\": \"event\",\n  \"id\": \"ftevent-abc123\"\n  \"created_at\": 1677610602,\n  \"level\": \"info\",\n  \"message\": \"Created fine-tuning job\"\n}\n"
        }
      },
      "FineTune": {
        "type": "object",
        "description": "The `FineTune` object represents a legacy fine-tune job that has been created through the API.\n",
        "deprecated": true,
        "required": [
          "created_at",
          "fine_tuned_model",
          "hyperparams",
          "id",
          "model",
          "object",
          "organization_id",
          "result_files",
          "status",
          "training_files",
          "updated_at",
          "validation_files"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The object identifier, which can be referenced in the API endpoints."
          },
          "created_at": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) for when the fine-tuning job was created."
          },
          "events": {
            "type": "array",
            "description": "The list of events that have been observed in the lifecycle of the FineTune job.",
            "items": {
              "$ref": "#/components/schemas/FineTuneEvent"
            }
          },
          "fine_tuned_model": {
            "type": "string",
            "description": "The name of the fine-tuned model that is being created.",
            "nullable": true
          },
          "hyperparams": {
            "type": "object",
            "description": "The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/hyperparameters) for more details.",
            "required": [
              "batch_size",
              "learning_rate_multiplier",
              "n_epochs",
              "prompt_loss_weight"
            ],
            "properties": {
              "batch_size": {
                "type": "integer",
                "description": "The batch size to use for training. The batch size is the number of\ntraining examples used to train a single forward and backward pass.\n"
              },
              "classification_n_classes": {
                "type": "integer",
                "description": "The number of classes to use for computing classification metrics.\n"
              },
              "classification_positive_class": {
                "type": "string",
                "description": "The positive class to use for computing classification metrics.\n"
              },
              "compute_classification_metrics": {
                "type": "boolean",
                "description": "The classification metrics to compute using the validation dataset at the end of every epoch.\n"
              },
              "learning_rate_multiplier": {
                "type": "number",
                "description": "The learning rate multiplier to use for training.\n"
              },
              "n_epochs": {
                "type": "integer",
                "description": "The number of epochs to train the model for. An epoch refers to one\nfull cycle through the training dataset.\n"
              },
              "prompt_loss_weight": {
                "type": "number",
                "description": "The weight to use for loss on the prompt tokens.\n"
              }
            }
          },
          "model": {
            "type": "string",
            "description": "The base model that is being fine-tuned."
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always \"fine-tune\"."
          },
          "organization_id": {
            "type": "string",
            "description": "The organization that owns the fine-tuning job."
          },
          "result_files": {
            "type": "array",
            "description": "The compiled results files for the fine-tuning job.",
            "items": {
              "$ref": "#/components/schemas/OpenAIFile"
            }
          },
          "status": {
            "type": "string",
            "description": "The current status of the fine-tuning job, which can be either `created`, `running`, `succeeded`, `failed`, or `cancelled`."
          },
          "training_files": {
            "type": "array",
            "description": "The list of files used for training.",
            "items": {
              "$ref": "#/components/schemas/OpenAIFile"
            }
          },
          "updated_at": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) for when the fine-tuning job was last updated."
          },
          "validation_files": {
            "type": "array",
            "description": "The list of files used for validation.",
            "items": {
              "$ref": "#/components/schemas/OpenAIFile"
            }
          }
        },
        "x-oaiMeta": {
          "name": "The fine-tune object",
          "example": "{\n  \"id\": \"ft-AF1WoRqd3aJAHsqc9NY7iL8F\",\n  \"object\": \"fine-tune\",\n  \"model\": \"curie\",\n  \"created_at\": 1614807352,\n  \"events\": [\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807352,\n      \"level\": \"info\",\n      \"message\": \"Job enqueued. Waiting for jobs ahead to complete. Queue number: 0.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807356,\n      \"level\": \"info\",\n      \"message\": \"Job started.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807861,\n      \"level\": \"info\",\n      \"message\": \"Uploaded snapshot: curie:ft-acmeco-2021-03-03-21-44-20.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807864,\n      \"level\": \"info\",\n      \"message\": \"Uploaded result files: file-abc123.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807864,\n      \"level\": \"info\",\n      \"message\": \"Job succeeded.\"\n    }\n  ],\n  \"fine_tuned_model\": \"curie:ft-acmeco-2021-03-03-21-44-20\",\n  \"hyperparams\": {\n    \"batch_size\": 4,\n    \"learning_rate_multiplier\": 0.1,\n    \"n_epochs\": 4,\n    \"prompt_loss_weight\": 0.1,\n  },\n  \"organization_id\": \"org-123\",\n  \"result_files\": [\n    {\n      \"id\": \"file-abc123\",\n      \"object\": \"file\",\n      \"bytes\": 81509,\n      \"created_at\": 1614807863,\n      \"filename\": \"compiled_results.csv\",\n      \"purpose\": \"fine-tune-results\"\n    }\n  ],\n  \"status\": \"succeeded\",\n  \"validation_files\": [],\n  \"training_files\": [\n    {\n      \"id\": \"file-abc123\",\n      \"object\": \"file\",\n      \"bytes\": 1547276,\n      \"created_at\": 1610062281,\n      \"filename\": \"my-data-train.jsonl\",\n      \"purpose\": \"fine-tune-train\"\n    }\n  ],\n  \"updated_at\": 1614807865,\n}\n"
        }
      },
      "FineTuneEvent": {
        "type": "object",
        "description": "Fine-tune event object",
        "deprecated": true,
        "required": [
          "object",
          "created_at",
          "level",
          "message"
        ],
        "properties": {
          "created_at": {
            "type": "integer"
          },
          "level": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "object": {
            "type": "string"
          }
        },
        "x-oaiMeta": {
          "name": "The fine-tune event object",
          "example": "{\n  \"object\": \"event\",\n  \"created_at\": 1677610602,\n  \"level\": \"info\",\n  \"message\": \"Created fine-tune job\"\n}\n"
        }
      },
      "CompletionUsage": {
        "type": "object",
        "description": "Usage statistics for the completion request.",
        "required": [
          "prompt_tokens",
          "completion_tokens",
          "total_tokens"
        ],
        "properties": {
          "completion_tokens": {
            "type": "integer",
            "description": "Number of tokens in the generated completion."
          },
          "prompt_tokens": {
            "type": "integer",
            "description": "Number of tokens in the prompt."
          },
          "total_tokens": {
            "type": "integer",
            "description": "Total number of tokens used in the request (prompt + completion)."
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "tags": [
    {
      "name": "Audio",
      "description": "Learn how to turn audio into text."
    },
    {
      "name": "Chat",
      "description": "Given a list of messages comprising a conversation, the model will return a response."
    },
    {
      "name": "Completions",
      "description": "Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position."
    },
    {
      "name": "Embeddings",
      "description": "Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms."
    },
    {
      "name": "Fine-tuning",
      "description": "Manage fine-tuning jobs to tailor a model to your specific training data."
    },
    {
      "name": "Files",
      "description": "Files are used to upload documents that can be used with features like fine-tuning."
    },
    {
      "name": "Images",
      "description": "Given a prompt and/or an input image, the model will generate a new image."
    },
    {
      "name": "Models",
      "description": "List and describe the various models available in the API."
    },
    {
      "name": "Moderations",
      "description": "Given a input text, outputs if the model classifies it as violating OpenAI's content policy."
    },
    {
      "name": "Fine-tunes",
      "description": "Manage legacy fine-tuning jobs to tailor a model to your specific training data."
    },
    {
      "name": "Edits",
      "description": "Given a prompt and an instruction, the model will return an edited version of the prompt."
    }
  ],
  "x-oaiMeta": {
    "groups": [
      {
        "id": "audio",
        "title": "Audio",
        "description": "Learn how to turn audio into text.\n\nRelated guide: [Speech to text](/docs/guides/speech-to-text)\n",
        "sections": [
          {
            "key": "createTranscription",
            "path": "createTranscription"
          },
          {
            "key": "createTranslation",
            "path": "createTranslation"
          }
        ]
      },
      {
        "id": "chat",
        "title": "Chat",
        "description": "Given a list of messages comprising a conversation, the model will return a response.\n\nRelated guide: [Chat completions](/docs/guides/gpt)\n",
        "sections": [
          {
            "type": "object",
            "key": "CreateChatCompletionResponse",
            "path": "object"
          },
          {
            "type": "object",
            "key": "CreateChatCompletionStreamResponse",
            "path": "streaming"
          },
          {
            "key": "createChatCompletion",
            "path": "create"
          }
        ]
      },
      {
        "id": "completions",
        "title": "Completions",
        "legacy": "true",
        "description": "Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position. We recommend most users use our Chat completions API. [Learn more](/docs/deprecations/2023-07-06-gpt-and-embeddings)\n\nRelated guide: [Legacy Completions](/docs/guides/gpt/completions-api)\n",
        "sections": [
          {
            "type": "object",
            "key": "CreateCompletionResponse",
            "path": "object"
          },
          {
            "key": "createCompletion",
            "path": "create"
          }
        ]
      },
      {
        "id": "embeddings",
        "title": "Embeddings",
        "description": "Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.\n\nRelated guide: [Embeddings](/docs/guides/embeddings)\n",
        "sections": [
          {
            "type": "object",
            "key": "Embedding",
            "path": "object"
          },
          {
            "key": "createEmbedding",
            "path": "create"
          }
        ]
      },
      {
        "id": "fine-tuning",
        "title": "Fine-tuning",
        "description": "Manage fine-tuning jobs to tailor a model to your specific training data.\n\nRelated guide: [Fine-tune models](/docs/guides/fine-tuning)\n",
        "sections": [
          {
            "type": "object",
            "key": "FineTuningJob",
            "path": "object"
          },
          {
            "key": "createFineTuningJob",
            "path": "create"
          },
          {
            "key": "listPaginatedFineTuningJobs",
            "path": "list"
          },
          {
            "key": "retrieveFineTuningJob",
            "path": "retrieve"
          },
          {
            "key": "cancelFineTuningJob",
            "path": "cancel"
          },
          {
            "type": "object",
            "key": "FineTuningJobEvent",
            "path": "event-object"
          },
          {
            "key": "listFineTuningEvents",
            "path": "list-events"
          }
        ]
      },
      {
        "id": "files",
        "title": "Files",
        "description": "Files are used to upload documents that can be used with features like [fine-tuning](/docs/api-reference/fine-tuning).\n",
        "sections": [
          {
            "type": "object",
            "key": "OpenAIFile",
            "path": "object"
          },
          {
            "key": "listFiles",
            "path": "list"
          },
          {
            "key": "createFile",
            "path": "create"
          },
          {
            "key": "deleteFile",
            "path": "delete"
          },
          {
            "key": "retrieveFile",
            "path": "retrieve"
          },
          {
            "key": "downloadFile",
            "path": "retrieve-contents"
          }
        ]
      },
      {
        "id": "images",
        "title": "Images",
        "description": "Given a prompt and/or an input image, the model will generate a new image.\n\nRelated guide: [Image generation](/docs/guides/images)\n",
        "sections": [
          {
            "type": "object",
            "key": "Image",
            "path": "object"
          },
          {
            "key": "createImage",
            "path": "create"
          },
          {
            "key": "createImageEdit",
            "path": "createEdit"
          },
          {
            "key": "createImageVariation",
            "path": "createVariation"
          }
        ]
      },
      {
        "id": "models",
        "title": "Models",
        "description": "List and describe the various models available in the API. You can refer to the [Models](/docs/models) documentation to understand what models are available and the differences between them.\n",
        "sections": [
          {
            "type": "object",
            "key": "Model",
            "path": "object"
          },
          {
            "key": "listModels",
            "path": "list"
          },
          {
            "key": "retrieveModel",
            "path": "retrieve"
          },
          {
            "key": "deleteModel",
            "path": "delete"
          }
        ]
      },
      {
        "id": "moderations",
        "title": "Moderations",
        "description": "Given a input text, outputs if the model classifies it as violating OpenAI's content policy.\n\nRelated guide: [Moderations](/docs/guides/moderation)\n",
        "sections": [
          {
            "type": "object",
            "key": "CreateModerationResponse",
            "path": "object"
          },
          {
            "key": "createModeration",
            "path": "create"
          }
        ]
      },
      {
        "id": "fine-tunes",
        "title": "Fine-tunes",
        "deprecated": "true",
        "description": "Manage legacy fine-tuning jobs to tailor a model to your specific training data.\n\nWe recommend transitioning to the updating [fine-tuning API](/docs/guides/fine-tuning)\n",
        "sections": [
          {
            "type": "object",
            "key": "FineTune",
            "path": "object"
          },
          {
            "key": "createFineTune",
            "path": "create"
          },
          {
            "key": "listFineTunes",
            "path": "list"
          },
          {
            "key": "retrieveFineTune",
            "path": "retrieve"
          },
          {
            "key": "cancelFineTune",
            "path": "cancel"
          },
          {
            "type": "object",
            "key": "FineTuneEvent",
            "path": "event-object"
          },
          {
            "key": "listFineTuneEvents",
            "path": "list-events"
          }
        ]
      },
      {
        "id": "edits",
        "title": "Edits",
        "deprecated": "true",
        "description": "Given a prompt and an instruction, the model will return an edited version of the prompt.\n",
        "sections": [
          {
            "type": "object",
            "key": "CreateEditResponse",
            "path": "object"
          },
          {
            "key": "createEdit",
            "path": "create"
          }
        ]
      }
    ]
  }
}